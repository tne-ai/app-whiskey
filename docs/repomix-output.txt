This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.specstory/
  .what-is-this.md
docs/
  add-arrival_documents.md
  add-site_overview.md
  questions_for_w.md
  starting-app_validate.md
src/
  config/
    auth.ts
  lib/
    services/
      api.ts
      arrival-documents.ts
      materials.ts
      removals.ts
      sites.ts
    index.ts
  routes/
    arrival_documents/
      [id]/
        edit/
          +page.svelte
        +page.svelte
      new/
        +page.svelte
      +page.svelte
    login/
      +page.server.ts
      +page.svelte
    logout/
      +server.ts
    materials/
      [id]/
        edit/
          +page.svelte
        +page.svelte
      new/
        +page.svelte
      +page.svelte
    sites/
      [id]/
        deliveries/
          +page.svelte
        logistics/
          delivery-removal/
            +page.svelte
          water-energy/
            +page.svelte
          +page.svelte
        machine-operation/
          +page.svelte
        removals/
          [removalId]/
            edit/
              +page.svelte
            +page.svelte
          new/
            +page.svelte
          +page.svelte
        reports/
          embodied-carbon/
            +page.svelte
          logistic-emissions/
            +page.svelte
          materials/
            +page.svelte
          site-details/
            +page.svelte
          waste/
            +page.svelte
          +page.svelte
        +page.svelte
    +layout.server.ts
    +layout.svelte
    +page.svelte
  app.css
  app.d.ts
  app.html
  hooks.server.ts
.cursorindexingignore
.env.example
.gitignore
.npmrc
eslint.config.js
package.json
README.md
schema.sql
svelte.config.js
tsconfig.json
vite.config.ts

================================================================
Files
================================================================

================
File: .specstory/.what-is-this.md
================
# SpecStory Artifacts Directory
    
This directory is automatically created and maintained by the SpecStory extension to preserve your Cursor composer and chat history.
    
## What's Here?
    
- `.specstory/history`: Contains markdown files of your AI coding sessions
    - Each file represents a separate chat or composer session
    - Files are automatically updated as you work
- `.specstory/cursor_rules_backups`: Contains backups of the `.cursor/rules/derived-cursor-rules.mdc` file
    - Backups are automatically created each time the `.cursor/rules/derived-cursor-rules.mdc` file is updated
    - You can enable/disable the Cursor Rules feature in the SpecStory settings, it is disabled by default

## Valuable Uses
    
- Capture: Keep your context window up-to-date when starting new Chat/Composer sessions via @ references
- Search: For previous prompts and code snippets 
- Learn: Meta-analyze your patterns and learn from your past experiences
- Derive: Keep Cursor on course with your past decisions by automatically deriving Cursor rules from your AI interactions
    
## Version Control
    
We recommend keeping this directory under version control to maintain a history of your AI interactions. However, if you prefer not to version these files, you can exclude them by adding this to your `.gitignore`:
    
```
.specstory
```

We recommend not keeping the `.specstory/cursor_rules_backups` directory under version control if you are already using git to version the `.cursor/rules` directory, and committing regularly. You can exclude it by adding this to your `.gitignore`:

```
.specstory/cursor_rules_backups
```

## Searching Your Codebase
    
When searching your codebase in Cursor, search results may include your previous AI coding interactions. To focus solely on your actual code files, you can exclude the AI interaction history from search results.
    
To exclude AI interaction history:
    
1. Open the "Find in Files" search in Cursor (Cmd/Ctrl + Shift + F)
2. Navigate to the "files to exclude" section
3. Add the following pattern:
    
```
.specstory/*
```
    
This will ensure your searches only return results from your working codebase files.

## Notes

- Auto-save only works when Cursor/sqlite flushes data to disk. This results in a small delay after the AI response is complete before SpecStory can save the history.
- Auto-save does not yet work on remote WSL workspaces.

## Settings
    
You can control auto-saving behavior in Cursor:
    
1. Open Cursor → Settings → VS Code Settings (Cmd/Ctrl + ,)
2. Search for "SpecStory"
3. Find "Auto Save" setting to enable/disable
    
Auto-save occurs when changes are detected in Cursor's sqlite database, or every 2 minutes as a safety net.

================
File: docs/add-arrival_documents.md
================
I want to add an /arrival_documents page to this app.

# Collection view:
At /arrival_documents, there should be a table of arrival documents with these columns:

	Site
	Name
	Arrival date
	Validated column, which shows 
		- a green checkbox badge if all entries linked to the arrival document in the i_materials table are is_valid = true
		- a red x badge otherwise


Filterable by site, from a populated select
Sortable by all visible columns

Each row should have an action button called "View" at the right end with the column header Actions. The View button in each row should be linked to the /arrival_documents/[id] page.

Should have a Create Arrival Document button

# Item view
At /arrival_documents/[id], three main elements are presented in a tabular arrangement with two rows:

	- The top row is divided into two columns
		- The first, left column in the top row is a representation of the arrival document. For now this will just be a large, bolded rendering of the name of the arrival_document.
		- The second, right column in the top row is a list of the attributes of the arrival document, as listed in the arrival_documents schema
		This document attribute cell (upper right) should have an editable field for "valid" and a link to a new edit page that allows editing of the document attributes
	- The lower row is a single column that has a table similar to the one currently at /materials, with key attributes listed, including a Valid button and View and Edit action buttons. These follow links as in the /materials page.

================
File: docs/add-site_overview.md
================
Site-based navigation

We need to add some navigation to the site.

For most users, the site will be the unit of recordkeeping. So let's make a Site-major navigation drawer on the left of the page.

In the drawer, there will be a list of collapsible site menu items. The set of sites, the top-level menu items, will be the result of a database query that will initially be all of the rows of the i_sites table, but at a later time will be filtered based on the permissions of the user.

When a site entry itself is selected, the site overview page will be presented. For now, just make a dummmy page with "<site_name> Overview" for that.

When the site entry is expanded, it will have these sub-items:

	- Deliveries
	- Removals
	- Logistics
	- Machine operation
	- Reports

When the Deliveries sub-item under a site is clicked, it will show the list of arrival_documents associated with that site in a table very similar to the one in the current arrrival_documents page. From that page, the same linked pages should be avaialble.

In a similar way, we will have overveiw pages for removals, logistics, and machine operation. The corresponding database tables are:

	Removals - i_resource_removal
	Logistics - i_logistics
	Machine operation - i_machine_usage

Reports will start as links to external pages.

Please review the specs for this new navigation system based on sites in the database and ask any questions you have. When we are clear on the path forward, I will release you to make the changes in to code.

================
File: docs/questions_for_w.md
================
How often will start or end locations for logistics operations be added? (-> Can we refer to them in logistics table)

Projects vs. sites: How are they related, exactly? Theoretically, the Kotare Wings project could take place at the Kea Falls Site and the Kea Springs site. What  reporting  be based on (project, site, either, compound key). Is there only one Project per Site

How often will a user (of various permissions) add a delivery record outside of an arrival document to the system? Similarly for other a la carte data additions? (Influences user flow for adding data)

Discuss mass determination - how to present our view, state the problem, raise specific issues to discuss. Can we propose a solution?

In logistics entries, what is unique to a trip and what is known in references?

What about water usage?

================
File: docs/starting-app_validate.md
================
Making app-validate

I want to make a simple editor in this Svelte 5 Runes app for the content of a single table in my database.
The table is a PostgreSQL table reachable by direct database access and also via REST using PostgREST.

I want to have a paginated tabular view that shows a subset of the fields in the table, and an edit view that show all of the fields and allows editing and saving.

It should be possible to filter the table view, and to use selects loaded with existing values to choose the content of referece fields using a value in the releated table.

The table is called materials. Its schema is:

create table public.i_materials
(
    material_entry_id     uuid    default gen_random_uuid() not null
        primary key,
    site_id               uuid                              not null
        references public.i_sites,
    submaterial_id        uuid
        references public.l_submaterials,
    quantity              numeric(12, 2)                    not null,
    unit_id               uuid
        references public.l_units,
    weight_kg             numeric(12, 2),
    volume_m3             numeric(12, 2),
    cost_per_unit         numeric(12, 2),
    total_cost            numeric(12, 2),
    supplier_id           uuid
        references public.l_suppliers,
    delivery_date         date,
    stage_id              uuid,
    notes                 text,
    item_id               uuid,
    arrival_doc_item_name varchar,
    arrival_doc_id        uuid,
    is_valid              boolean default false,
    default_waste_pct     numeric(5, 2)
)

I would like it to have sensible REST-style routing, so maybe these pages will be materials and materials/[id], materials/[id]/edit 

Please use the nice styling of tailwind and DaisyUI to make it pretty.

In the first version, put all of the fields in the tabular view, and I will delete the needless ones.

Please put the database credentials in a .env file.

Can you make a task list first, and then we can go ahead?

Even before we make the task list, please review the request, ask any questions you have, then  rephrase it concisely in a structured form so we can be sure we agree on the direction.

I willl let you write files, but please only do what I ask and stop now and then for me to review your progress and direction.1. We are in a new app with Tailwind and DaisyUI installed. We are at /Users/paul/ws/git/src/app/app-validate. Please asdd  the editor pages to this app.
2. We can connect to the database via PostgREST if you prefer. That seems easiest. I don't think we would make a new interface, right?
3. Foreign key identifiers: 
site_id => site_name
submaterial -> submaterial_name
unit_id => unit_name
supplier_id => supplier_name
stage_id => stage_name
4. The Postgres uses bearer authorization
5. No validation beyond database accepability at this point.
6. A faceted search with selects above the header would be a great start.

Oh, it should be possible to create a new material record in this interface.

If you would like to review the full schema of the database that i_materials comes from (it is 33K), you can see it in schema.sql.

================
File: src/config/auth.ts
================
// Hardcoded credentials for demo login protection
export const AUTH_USERS = [
  { username: 'admin', password: 'secret' },
  { username: 'alice', password: 'alice123' },
  { username: 'bob', password: 'bob456' }
];

================
File: src/lib/services/api.ts
================
import axios from 'axios';

// Assuming environment variables are loaded via SvelteKit's env handling
const API_URL = import.meta.env.VITE_POSTGREST_URL || 'http://localhost:3000';
const API_KEY = import.meta.env.VITE_API_KEY || '';

console.log('API URL:', API_URL);

// Create axios instance for PostgREST with Supabase configuration
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
    'apikey': API_KEY,
    'Authorization': `Bearer ${API_KEY}`,
    'Prefer': 'return=representation'
  }
});

// Add response interceptor for debugging
api.interceptors.response.use(
  response => {
    console.log('API success response:', response.config.url, response.status);
    return response;
  },
  error => {
    console.error('API error:', error.config?.url, error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
      console.error('Response status:', error.response.status);
      console.error('Response headers:', error.response.headers);
    } else if (error.request) {
      console.error('No response received, request:', error.request);
    }
    return Promise.reject(error);
  }
);

export default api;

================
File: src/lib/services/arrival-documents.ts
================
import api from './api';
import type { Site } from './sites';

export type ArrivalDocument = {
  arrival_doc_id: string;
  delivery_date: string | null;
  arrival_doc_name: string | null;
  arrival_doc_description: string | null;
  arrival_doc_text: string | null;
  site_id: string | null;
  site_name?: string | null;
  is_validated?: boolean;
  is_valid?: boolean;
  materials_count?: number;
  computed_is_valid?: boolean;
};

export type ArrivalDocumentCreate = {
  delivery_date: string | null;
  arrival_doc_name: string;
  arrival_doc_description: string | null;
  arrival_doc_text: string | null;
  site_id: string;
  is_valid?: boolean;
};

export type ArrivalDocumentUpdate = {
  delivery_date: string | null;
  arrival_doc_name: string;
  arrival_doc_description: string | null;
  arrival_doc_text: string | null;
  site_id: string;
  is_valid?: boolean;
};

export type GetArrivalDocumentsParams = {
  page?: number;
  limit?: number;
  siteId?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
};

// Legacy type aliases for backward compatibility
export type PaginationParams = {
  page?: number;
  limit?: number;
};

export type FilterParams = {
  siteId?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
};

export type GetArrivalDocumentsResponse = {
  data: ArrivalDocument[];
  totalPages: number;
  totalCount: number;
};

class ArrivalDocumentsService {
  async getArrivalDocuments(params?: GetArrivalDocumentsParams): Promise<GetArrivalDocumentsResponse> {
    let url = '/i_arrival_documents';
    const urlParams = new URLSearchParams();

    // Calculate pagination
    const page = params?.page || 1;
    const limit = params?.limit || 20;
    const offset = (page - 1) * limit;

    // Add pagination
    urlParams.append('limit', limit.toString());
    urlParams.append('offset', offset.toString());

    // Add sorting
    if (params?.sortBy) {
      const order = `${params.sortBy}.${params.sortOrder || 'asc'}`;
      urlParams.append('order', order);
    }

    // Add site filter
    if (params?.siteId) {
      urlParams.append('site_id', `eq.${params.siteId}`);
    }

    // Get total count for pagination using Prefer header
    const countUrl = `/i_arrival_documents${params?.siteId ? `?site_id=eq.${params.siteId}` : ''}`;
    
    try {
      const [dataResponse, countResponse] = await Promise.all([
        api.get(`${url}?${urlParams.toString()}`),
        api.get(countUrl, {
          headers: {
            'Prefer': 'count=exact'
          }
        })
      ]);

      const documents = dataResponse.data;
      const totalCount = parseInt(countResponse.headers['content-range']?.split('/')[1] || '0');
      const totalPages = Math.ceil(totalCount / limit);
      
      // Fetch site names for all documents
      if (documents && documents.length > 0) {
        // Get unique site IDs
        const siteIds = [...new Set(documents.map((doc: ArrivalDocument) => doc.site_id).filter(Boolean))];
        
        if (siteIds.length > 0) {
          try {
            // Fetch all sites in one call
            const sitesResponse = await api.get(`/i_sites?site_id=in.(${siteIds.join(',')})`);
            const sites = sitesResponse.data;
            
            // Create a map of site_id to site_name
            const siteMap = new Map<string, string>();
            sites.forEach((site: Site) => {
              siteMap.set(site.site_id, site.site_name);
            });
            
            // Add site names to documents
            documents.forEach((doc: ArrivalDocument) => {
              if (doc.site_id) {
                doc.site_name = siteMap.get(doc.site_id) || null;
              }
            });
          } catch (error: any) {
            console.error('Error fetching site names:', error);
          }
        }
      }

      // Fetch materials for validation status
      if (documents && documents.length > 0) {
        const docIds = documents.map((doc: ArrivalDocument) => doc.arrival_doc_id);
        
        try {
          const materialsResponse = await api.get(`/i_materials?arrival_doc_id=in.(${docIds.join(',')})`);
          const materials = materialsResponse.data;
          
          // Group materials by arrival_doc_id and calculate validation status
          const materialsByDoc = new Map<string, any[]>();
          materials.forEach((material: any) => {
            if (!materialsByDoc.has(material.arrival_doc_id)) {
              materialsByDoc.set(material.arrival_doc_id, []);
            }
            materialsByDoc.get(material.arrival_doc_id)?.push(material);
          });
          
          // Add computed validation status to each document
          documents.forEach((doc: ArrivalDocument) => {
            const docMaterials = materialsByDoc.get(doc.arrival_doc_id) || [];
            doc.materials_count = docMaterials.length;
            
            // Document is valid if all materials are valid
            doc.computed_is_valid = docMaterials.length > 0 && 
              docMaterials.every((material: any) => material.is_valid === true);
          });
        } catch (error: any) {
          console.error('Error fetching materials for validation:', error);
          // Set default validation status
          documents.forEach((doc: ArrivalDocument) => {
            doc.materials_count = 0;
            doc.computed_is_valid = false;
          });
        }
      }

      return {
        data: documents,
        totalPages,
        totalCount
      };
    } catch (error: any) {
      console.error('Error fetching arrival documents:', error);
      throw error;
    }
  }

  async getArrivalDocument(id: string): Promise<ArrivalDocument> {
    const response = await api.get(`/i_arrival_documents?arrival_doc_id=eq.${id}`);
    const document = response.data[0];
    
    // If document has a site_id, fetch the site name
    if (document && document.site_id) {
      try {
        const siteResponse = await api.get(`/i_sites?site_id=eq.${document.site_id}&select=site_name`);
        if (siteResponse.data && siteResponse.data[0]) {
          document.site_name = siteResponse.data[0].site_name;
        }
      } catch (err: any) {
        console.error('Error fetching site name:', err);
        document.site_name = null;
      }
    }
    
    return document;
  }

  async createArrivalDocument(document: ArrivalDocumentCreate): Promise<ArrivalDocument> {
    const response = await api.post('/i_arrival_documents', document);
    return response.data;
  }

  async updateArrivalDocument(id: string, document: ArrivalDocumentUpdate): Promise<ArrivalDocument> {
    const response = await api.patch(`/i_arrival_documents?arrival_doc_id=eq.${id}`, document);
    return response.data;
  }

  async deleteArrivalDocument(id: string): Promise<void> {
    await api.delete(`/i_arrival_documents?arrival_doc_id=eq.${id}`);
  }

  async getSites(): Promise<Site[]> {
    const response = await api.get('/i_sites');
    return response.data;
  }

  async getArrivalDocumentMaterials(arrivalDocId: string): Promise<any[]> {
    const response = await api.get(`/i_materials?arrival_doc_id=eq.${arrivalDocId}`);
    return response.data;
  }

  async updateArrivalDocumentValidationStatus(id: string, isValid: boolean): Promise<void> {
    await api.patch(`/i_arrival_documents?arrival_doc_id=eq.${id}`, {
      is_validated: isValid
    });
  }
}

const arrivalDocumentsService = new ArrivalDocumentsService();
export default arrivalDocumentsService;

================
File: src/lib/services/materials.ts
================
import api from './api';
import type { Site } from './sites';

export type Material = {
  material_entry_id: string;
  site_id: string;
  submaterial_id: string | null;
  quantity: number;
  unit_id: string;
  weight_kg: number | null;
  volume_m3: number | null;
  cost_per_unit: number | null;
  total_cost: number | null;
  supplier_id: string | null;
  delivery_date: string | null;
  stage_id: string | null;
  notes: string | null;
  item_id: string | null;
  arrival_doc_item_name: string | null;
  arrival_doc_id: string | null;
  is_valid: boolean;
  default_waste_pct: number | null;
  id_po: string | null;
  item_name?: string | null;
  arrival_doc_name?: string | null;
};

export type Submaterial = {
  submaterial_id: string;
  submaterial_name: string;
};

export type Unit = {
  unit_id: string;
  unit_name: string;
};

export type Supplier = {
  supplier_id: string;
  supplier_name: string;
};

export type Stage = {
  stage_id: string;
  stage_name: string;
};

export type Item = {
  item_id: string;
  item_name: string;
};

export type ArrivalDocument = {
  arrival_doc_id: string;
  arrival_doc_name: string;
};

export type PaginationParams = {
  limit: number;
  offset: number;
  order?: string;
};

export type FilterParams = {
  site_id?: string;
  submaterial_id?: string;
  unit_id?: string;
  supplier_id?: string;
  stage_id?: string;
  is_valid?: boolean;
  arrival_doc_id?: string;
};

const materialsService = {
  // Get arrival documents
  getArrivalDocuments: async () => {
    try {
      console.log('Getting arrival documents');
      const response = await api.get('/i_arrival_documents');
      console.log('Arrival documents received:', response.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error('Error getting arrival documents:', error);
      throw error;
    }
  },
  
  // Get arrival document by ID
  getArrivalDocument: async (id: string) => {
    if (!id) return null;
    try {
      console.log('Getting arrival document with ID:', id);
      const url = `/i_arrival_documents?arrival_doc_id=eq.${id}`;
      
      const response = await api.get(url);
      console.log('Arrival document found:', !!response.data[0]);
      
      return response.data[0];
    } catch (error) {
      console.error('Error getting arrival document by ID:', error);
      return null;
    }
  },
  
  // Get item details
  getItems: async () => {
    try {
      console.log('Getting item details');
      const response = await api.get('/l_item_details');
      console.log('Item details received:', response.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error('Error getting item details:', error);
      throw error;
    }
  },
  
  // Get an item by ID
  getItem: async (id: string) => {
    if (!id) return null;
    try {
      console.log('Getting item with ID:', id);
      const response = await api.get(`/l_item_details?item_id=eq.${id}`);
      console.log('Item found:', !!response.data[0]);
      return response.data[0];
    } catch (error) {
      console.error('Error getting item by ID:', error);
      return null;
    }
  },
  // Get materials with pagination and filtering
  getMaterials: async (pagination: PaginationParams, filters?: FilterParams) => {
    try {
      console.log('Getting materials with params:', pagination, filters);
      let queryParams = {};
      
      // Apply pagination
      queryParams = {
        ...queryParams,
        limit: pagination.limit,
        offset: pagination.offset,
      };
      
      if (pagination.order) {
        queryParams = { ...queryParams, order: pagination.order };
      }
      
      // Apply filters if provided
      if (filters) {
        Object.entries(filters).forEach(([key, value]) => {
          if (value !== undefined && value !== null) {
            // Handle boolean values differently (is_valid needs special format for PostgREST)
            if (key === 'is_valid') {
              if (value === true) {
                // For true, only get records where is_valid is explicitly true
                queryParams = { ...queryParams, [key]: `eq.true` };
                console.log(`Setting ${key} filter to eq.true`);
              } else {
                // For false, get records where is_valid is false
                // Since you've updated all records to have explicit false values, we can use a simple equals
                queryParams = { ...queryParams, [key]: `eq.false` };
                console.log(`Setting ${key} filter to eq.false`);
              }
            } else {
              queryParams = { ...queryParams, [key]: `eq.${value}` };
              console.log(`Setting ${key} filter to eq.${value}`);
            }
          }
        });
      }
      
      console.log('Sending request to i_materials with params:', queryParams);
      const response = await api.get('/i_materials', { params: queryParams });
      console.log('Materials response data count:', response.data?.length || 0);
      
      // Get item details and arrival documents to merge into the materials data
      const [items, arrivalDocuments] = await Promise.all([
        materialsService.getItems(),
        materialsService.getArrivalDocuments()
      ]);
      
      const materialsWithJoinedData = response.data.map((material: Material) => {
        let result = { ...material };
        
        // Add item name if item exists
        if (material.item_id) {
          const item = items.find((i: Item) => i.item_id === material.item_id);
          if (item) {
            result.item_name = item.item_name;
          }
        }
        
        // Add arrival document name if arrival document exists
        if (material.arrival_doc_id) {
          const arrivalDoc = arrivalDocuments.find((a: ArrivalDocument) => a.arrival_doc_id === material.arrival_doc_id);
          result.arrival_doc_name = arrivalDoc?.arrival_doc_name;
        }
        
        return result;
      });
      
      return materialsWithJoinedData;
    } catch (error) {
      console.error('Error getting materials:', error);
      throw error;
    }
  },
  
  // Get material by ID
  getMaterial: async (id: string) => {
    try {
      console.log('Getting material with ID:', id);
      const response = await api.get(`/i_materials?material_entry_id=eq.${id}`);
      console.log('Material found:', !!response.data[0]);
      
      if (!response.data[0]) {
        return null;
      }
      
      const material = response.data[0];
      
      // Join item name if item_id exists
      if (material.item_id) {
        try {
          const itemResponse = await materialsService.getItem(material.item_id);
          if (itemResponse) {
            material.item_name = itemResponse.item_name;
          }
        } catch (err) {
          console.error('Error joining item data:', err);
        }
      }
      
      // Join arrival document name if arrival_doc_id exists
      if (material.arrival_doc_id) {
        console.log('Material has arrival_doc_id:', material.arrival_doc_id);
        try {
          console.log('Fetching arrival document for material:', material.material_entry_id);
          const arrivalDocResponse = await materialsService.getArrivalDocument(material.arrival_doc_id);
          console.log('Arrival doc response:', arrivalDocResponse);
          
          if (arrivalDocResponse) {
            console.log('Setting arrival_doc_name to:', arrivalDocResponse.arrival_doc_name);
            material.arrival_doc_name = arrivalDocResponse.arrival_doc_name;
          } else {
            console.log('No arrival document found for material arrival_doc_id:', material.arrival_doc_id);
          }
        } catch (err) {
          console.error('Error joining arrival document data:', err);
        }
      } else {
        console.log('Material has no arrival_doc_id');
      }
      
      return material;
    } catch (error) {
      console.error('Error getting material by ID:', error);
      throw error;
    }
  },
  
  // Create new material
  createMaterial: async (material: Omit<Material, 'material_entry_id'>) => {
    try {
      // Remove derived fields that don't exist in the database table
      const { arrival_doc_name, item_name, ...materialToSave } = material as any;
      
      console.log('Creating new material:', materialToSave);
      const response = await api.post('/i_materials', materialToSave);
      console.log('Material created:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error creating material:', error);
      throw error;
    }
  },
  
  // Update material
  updateMaterial: async (id: string, material: Partial<Material>) => {
    try {
      // Remove derived fields that don't exist in the database table
      const { arrival_doc_name, item_name, ...materialToSave } = material as any;
      
      console.log('Updating material:', id, materialToSave);
      const response = await api.patch(`/i_materials?material_entry_id=eq.${id}`, materialToSave);
      console.log('Material updated:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error updating material:', error);
      throw error;
    }
  },
  
  // Delete material
  deleteMaterial: async (id: string) => {
    try {
      console.log('Deleting material:', id);
      await api.delete(`/i_materials?material_entry_id=eq.${id}`);
      console.log('Material deleted successfully');
    } catch (error) {
      console.error('Error deleting material:', error);
      throw error;
    }
  },
  
  // Get reference data
  getSites: async () => {
    try {
      console.log('Getting sites');
      const response = await api.get('/i_sites');
      console.log('Sites received:', response.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error('Error getting sites:', error);
      throw error;
    }
  },
  
  getSubmaterials: async () => {
    try {
      console.log('Getting submaterials');
      const response = await api.get('/l_submaterials');
      console.log('Submaterials received:', response.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error('Error getting submaterials:', error);
      throw error;
    }
  },
  
  getUnits: async () => {
    try {
      console.log('Getting units');
      const response = await api.get('/l_units');
      console.log('Units received:', response.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error('Error getting units:', error);
      throw error;
    }
  },
  
  getSuppliers: async () => {
    try {
      console.log('Getting suppliers');
      const response = await api.get('/l_suppliers');
      console.log('Suppliers received:', response.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error('Error getting suppliers:', error);
      throw error;
    }
  },
  
  getStages: async () => {
    try {
      console.log('Getting stages');
      const response = await api.get('/l_stages');
      console.log('Stages received:', response.data?.length || 0);
      return response.data;
    } catch (error) {
      console.error('Error getting stages:', error);
      throw error;
    }
  }
};

export default materialsService;

================
File: src/lib/services/removals.ts
================
import api from './api';

// Types for Removal Records
export interface Removal {
  removal_id: string;
  site_id: string;
  submaterial_id: string;
  waste_weight_kg?: number;
  waste_volume_m3?: number;
  removal_distance_km?: number;
  removal_date?: string;
  disposal_method_id?: string;
  disposal_facility_id?: string;
  removal_cost?: number;
  removal_notes?: string;
  removal_partner_id?: string;
  appx_resource_value?: number;
  id_po?: string;
  // Joined fields for display
  submaterial_name?: string;
  disposal_method_name?: string;
  disposal_facility_name?: string;
}

export interface RemovalCreate {
  site_id: string;
  submaterial_id: string;
  waste_weight_kg?: number;
  waste_volume_m3?: number;
  removal_distance_km?: number;
  removal_date?: string;
  disposal_method_id?: string;
  disposal_facility_id?: string;
  removal_cost?: number;
  removal_notes?: string;
  removal_partner_id?: string;
  appx_resource_value?: number;
  id_po?: string;
}

export interface RemovalUpdate {
  submaterial_id?: string;
  waste_weight_kg?: number;
  waste_volume_m3?: number;
  removal_distance_km?: number;
  removal_date?: string;
  disposal_method_id?: string;
  disposal_facility_id?: string;
  removal_cost?: number;
  removal_notes?: string;
  removal_partner_id?: string;
  appx_resource_value?: number;
  id_po?: string;
}

// Lookup table types
export interface DisposalMethod {
  disposal_method_id: string;
  disposal_method_name: string;
}

export interface DisposalFacility {
  disposal_facility_id: string;
  disposal_facility_name: string;
}

export interface Submaterial {
  submaterial_id: string;
  submaterial_name: string;
  material_id?: string;
}

// Query parameters
export interface GetRemovalsParams {
  siteId: string;
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  dateFrom?: string;
  dateTo?: string;
  disposalMethodId?: string;
  submaterialId?: string;
}

export interface GetRemovalsResponse {
  data: Removal[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

class RemovalsService {
  async getRemovals(params: GetRemovalsParams): Promise<GetRemovalsResponse> {
    let url = '/i_resource_removal';
    const urlParams = new URLSearchParams();

    // Filter by site
    urlParams.append('site_id', `eq.${params.siteId}`);

    // Date range filters
    if (params.dateFrom) {
      urlParams.append('removal_date', `gte.${params.dateFrom}`);
    }
    if (params.dateTo) {
      urlParams.append('removal_date', `lte.${params.dateTo}`);
    }

    // Other filters
    if (params.disposalMethodId) {
      urlParams.append('disposal_method_id', `eq.${params.disposalMethodId}`);
    }
    if (params.submaterialId) {
      urlParams.append('submaterial_id', `eq.${params.submaterialId}`);
    }

    // Pagination
    const page = params.page || 1;
    const limit = params.limit || 20;
    const offset = (page - 1) * limit;
    
    urlParams.append('limit', limit.toString());
    urlParams.append('offset', offset.toString());

    // Sorting
    const sortBy = params.sortBy || 'removal_date';
    const sortOrder = params.sortOrder || 'desc';
    urlParams.append('order', `${sortBy}.${sortOrder}`);

    // Select with joins for display names
    urlParams.append('select', '*,l_submaterials(submaterial_name),l_disposal_methods(disposal_method_name),l_disposal_facilities(disposal_facility_name)');

    url += '?' + urlParams.toString();

    try {
      const response = await api.get(url);
      
      // Get total count for pagination
      const countResponse = await api.get(
        `/i_resource_removal?site_id=eq.${params.siteId}&select=count`,
        { headers: { 'Prefer': 'count=exact' } }
      );

      const total = parseInt(countResponse.headers['content-range']?.split('/')[1] || '0');
      const totalPages = Math.ceil(total / limit);

      // Transform the data to flatten joined fields
      const transformedData = response.data.map((removal: any) => ({
        ...removal,
        submaterial_name: removal.l_submaterials?.submaterial_name,
        disposal_method_name: removal.l_disposal_methods?.disposal_method_name,
        disposal_facility_name: removal.l_disposal_facilities?.disposal_facility_name
      }));

      return {
        data: transformedData,
        total,
        page,
        limit,
        totalPages
      };
    } catch (error) {
      console.error('Error fetching removals:', error);
      throw error;
    }
  }

  async getRemovalById(removalId: string): Promise<Removal | null> {
    try {
      const response = await api.get(
        `/i_resource_removal?removal_id=eq.${removalId}&select=*,l_submaterials(submaterial_name),l_disposal_methods(disposal_method_name),l_disposal_facilities(disposal_facility_name)`
      );
      
      if (response.data.length === 0) return null;

      const removal = response.data[0];
      return {
        ...removal,
        submaterial_name: removal.l_submaterials?.submaterial_name,
        disposal_method_name: removal.l_disposal_methods?.disposal_method_name,
        disposal_facility_name: removal.l_disposal_facilities?.disposal_facility_name
      };
    } catch (error) {
      console.error('Error fetching removal:', error);
      throw error;
    }
  }

  async createRemoval(removal: RemovalCreate): Promise<Removal> {
    try {
      const response = await api.post('/i_resource_removal', removal);
      return response.data;
    } catch (error) {
      console.error('Error creating removal:', error);
      throw error;
    }
  }

  async updateRemoval(removalId: string, updates: RemovalUpdate): Promise<Removal> {
    try {
      const response = await api.patch(`/i_resource_removal?removal_id=eq.${removalId}`, updates);
      return response.data[0];
    } catch (error) {
      console.error('Error updating removal:', error);
      throw error;
    }
  }

  async deleteRemoval(removalId: string): Promise<void> {
    try {
      await api.delete(`/i_resource_removal?removal_id=eq.${removalId}`);
    } catch (error) {
      console.error('Error deleting removal:', error);
      throw error;
    }
  }

  // Lookup data methods
  async getDisposalMethods(): Promise<DisposalMethod[]> {
    try {
      const response = await api.get('/l_disposal_methods?select=*&order=disposal_method_name.asc');
      return response.data;
    } catch (error) {
      console.error('Error fetching disposal methods:', error);
      throw error;
    }
  }

  async getDisposalFacilities(): Promise<DisposalFacility[]> {
    try {
      const response = await api.get('/l_disposal_facilities?select=*&order=disposal_facility_name.asc');
      return response.data;
    } catch (error) {
      console.error('Error fetching disposal facilities:', error);
      throw error;
    }
  }

  async getSubmaterials(): Promise<Submaterial[]> {
    try {
      const response = await api.get('/l_submaterials?select=*&order=submaterial_name.asc');
      return response.data;
    } catch (error) {
      console.error('Error fetching submaterials:', error);
      throw error;
    }
  }
}

const removalsService = new RemovalsService();
export default removalsService;

================
File: src/lib/services/sites.ts
================
import api from './api';

export interface Site {
  site_id: string;
  site_name: string;
  site_address?: string;
  site_city?: string;
  site_state?: string;
  site_postal_code?: string;
  site_country?: string;
  site_type_id?: string;
  land_use_id?: string;
  creation_date?: string;
  project_cost?: number;
  floor_area_m_2?: number;
}

export interface SiteType {
  site_type_id: string;
  site_type_name: string;
}

export interface LandUse {
  land_use_id: string;
  land_use_name: string;
}

export interface Stage {
  stage_id: string;
  stage_name: string;
}

export interface Company {
  company_name: string;
}

export interface GetSitesParams {
  company?: string;
  site_name?: string;
  stage?: string;
  city?: string;
  state?: string;
  start_date?: string;
  end_date?: string;
}

export interface RecentActivities {
  deliveries: any[];
  removals: any[];
  logistics: any[];
  machineUsage: any[];
  waterEnergy: any[];
}

class SitesService {
  async getSites(params?: GetSitesParams): Promise<Site[]> {
    try {
      let url = '/i_sites';
      const urlParams = new URLSearchParams();
      
      // Start with basic select - we'll add joins only if needed
      let select = '*';
      
      // Add company join if filtering by company
      if (params?.company) {
        select = '*,r_site_details(company_name)';
      }
      
      urlParams.append('select', select);
      
      // Add filters
      if (params?.company) {
        urlParams.append('r_site_details.company_name', `ilike.*${params.company}*`);
      }
      
      if (params?.site_name) {
        urlParams.append('site_name', `ilike.*${params.site_name}*`);
      }
      
      if (params?.city) {
        urlParams.append('site_city', `ilike.*${params.city}*`);
      }
      
      if (params?.state) {
        urlParams.append('site_state', `ilike.*${params.state}*`);
      }
      
      if (params?.start_date) {
        urlParams.append('creation_date', `gte.${params.start_date}`);
      }
      
      if (params?.end_date) {
        urlParams.append('creation_date', `lte.${params.end_date}`);
      }
      
      // Add order by site name
      urlParams.append('order', 'site_name.asc');
      
      const queryString = urlParams.toString();
      url += `?${queryString}`;
      
      let response = await api.get(url);
      let sites = response.data;
      
      // Handle stage filtering separately since there's no FK relationship
      if (params?.stage) {
        // First get the stage_id for the selected stage name
        const stageResponse = await api.get(
          `/l_stages?select=stage_id&stage_name=ilike.*${params.stage}*`
        );
        
        if (stageResponse.data.length > 0) {
          const stageIds = stageResponse.data.map((stage: any) => stage.stage_id);
          
          // Then get site IDs that have any of these stage IDs
          const siteStageResponse = await api.get(
            `/i_sites_stages?select=site_id&stage_id=in.(${stageIds.join(',')})`
          );
          
          const siteIdsWithStage = siteStageResponse.data.map((item: any) => item.site_id);
          
          // Filter the sites to only include those with the specified stage
          sites = sites.filter((site: Site) => siteIdsWithStage.includes(site.site_id));
        } else {
          // No matching stages found, return empty array
          sites = [];
        }
      }
      
      return sites;
    } catch (error) {
      console.error('Error fetching sites:', error);
      throw error;
    }
  }

  async getCompanies(): Promise<Company[]> {
    try {
      const response = await api.get('/r_site_details?select=company_name&order=company_name.asc');
      // Get unique company names
      const uniqueCompanies = response.data.reduce((acc: Company[], current: any) => {
        const exists = acc.find(company => company.company_name === current.company_name);
        if (!exists && current.company_name) {
          acc.push({ company_name: current.company_name });
        }
        return acc;
      }, []);
      return uniqueCompanies;
    } catch (error) {
      console.error('Error fetching companies:', error);
      throw error;
    }
  }

  async getStages(): Promise<Stage[]> {
    try {
      const response = await api.get('/l_stages?select=*&order=stage_name.asc');
      return response.data;
    } catch (error) {
      console.error('Error fetching stages:', error);
      throw error;
    }
  }

  async getCities(): Promise<string[]> {
    try {
      const response = await api.get('/i_sites?select=site_city&site_city=not.is.null&order=site_city.asc');
      // Get unique city names
      const uniqueCities = response.data.reduce((acc: string[], current: any) => {
        if (current.site_city && !acc.includes(current.site_city)) {
          acc.push(current.site_city);
        }
        return acc;
      }, []);
      return uniqueCities;
    } catch (error) {
      console.error('Error fetching cities:', error);
      throw error;
    }
  }

  async getStates(): Promise<string[]> {
    try {
      const response = await api.get('/i_sites?select=site_state&site_state=not.is.null&order=site_state.asc');
      // Get unique state names
      const uniqueStates = response.data.reduce((acc: string[], current: any) => {
        if (current.site_state && !acc.includes(current.site_state)) {
          acc.push(current.site_state);
        }
        return acc;
      }, []);
      return uniqueStates;
    } catch (error) {
      console.error('Error fetching states:', error);
      throw error;
    }
  }

  async getSiteById(siteId: string): Promise<Site | null> {
    try {
      const response = await api.get(`/i_sites?site_id=eq.${siteId}&select=*`);
      return response.data[0] || null;
    } catch (error) {
      console.error('Error fetching site:', error);
      throw error;
    }
  }

  async getSiteTypes(): Promise<SiteType[]> {
    try {
      const response = await api.get('/l_site_types?select=*');
      return response.data;
    } catch (error) {
      console.error('Error fetching site types:', error);
      throw error;
    }
  }

  async getLandUses(): Promise<LandUse[]> {
    try {
      const response = await api.get('/l_land_uses?select=*');
      return response.data;
    } catch (error) {
      console.error('Error fetching land uses:', error);
      throw error;
    }
  }

  async getRecentActivities(siteId: string): Promise<RecentActivities> {
    try {
      // Get recent deliveries (arrival documents)
      const deliveriesResponse = await api.get(
        `/i_arrival_documents?site_id=eq.${siteId}&select=*&order=delivery_date.desc&limit=3`
      );

      // Get recent removals with joined lookup tables
      const removalsResponse = await api.get(
        `/i_resource_removal?site_id=eq.${siteId}&select=*,l_submaterials(submaterial_name),l_disposal_methods(disposal_method_name),l_disposal_facilities(disposal_facility_name)&order=removal_date.desc&limit=3`
      );

      // Get recent logistics
      const logisticsResponse = await api.get(
        `/i_logistics?site_id=eq.${siteId}&select=*&order=delivery_date.desc&limit=3`
      );

      // Get recent machine usage
      const machineUsageResponse = await api.get(
        `/i_machine_usage?site_id=eq.${siteId}&select=*&order=usage_date.desc&limit=3`
      );

      // Get recent water & energy data
      const waterEnergyResponse = await api.get(
        `/i_water_energy?site_id=eq.${siteId}&select=*&order=consumption_date.desc&limit=3`
      );

      // Transform removals data to flatten joined fields
      const transformedRemovals = removalsResponse.data.map((removal: any) => ({
        ...removal,
        submaterial_name: removal.l_submaterials?.submaterial_name,
        disposal_method_name: removal.l_disposal_methods?.disposal_method_name,
        disposal_facility_name: removal.l_disposal_facilities?.disposal_facility_name
      }));

      return {
        deliveries: deliveriesResponse.data,
        removals: transformedRemovals,
        logistics: logisticsResponse.data,
        machineUsage: machineUsageResponse.data,
        waterEnergy: waterEnergyResponse.data
      };
    } catch (error) {
      console.error('Error fetching recent activities:', error);
      throw error;
    }
  }

  async getSiteDeliveries(siteId: string, pagination?: any, filters?: any): Promise<any[]> {
    try {
      let url = `/i_arrival_documents?site_id=eq.${siteId}&select=*`;
      
      if (pagination?.order) {
        url += `&order=${pagination.order}`;
      }
      
      if (pagination?.limit) {
        url += `&limit=${pagination.limit}`;
      }
      
      if (pagination?.offset) {
        url += `&offset=${pagination.offset}`;
      }

      const response = await api.get(url);
      return response.data;
    } catch (error) {
      console.error('Error fetching site deliveries:', error);
      throw error;
    }
  }

  async getSiteRemovals(siteId: string, pagination?: any): Promise<any[]> {
    try {
      let url = `/i_resource_removal?site_id=eq.${siteId}&select=*,l_submaterials(submaterial_name),l_disposal_methods(disposal_method_name),l_disposal_facilities(disposal_facility_name)`;
      
      if (pagination?.order) {
        url += `&order=${pagination.order}`;
      }
      
      if (pagination?.limit) {
        url += `&limit=${pagination.limit}`;
      }
      
      if (pagination?.offset) {
        url += `&offset=${pagination.offset}`;
      }

      const response = await api.get(url);
      
      // Transform the data to flatten joined fields
      const transformedData = response.data.map((removal: any) => ({
        ...removal,
        submaterial_name: removal.l_submaterials?.submaterial_name,
        disposal_method_name: removal.l_disposal_methods?.disposal_method_name,
        disposal_facility_name: removal.l_disposal_facilities?.disposal_facility_name
      }));

      return transformedData;
    } catch (error) {
      console.error('Error fetching site removals:', error);
      throw error;
    }
  }

  async getSiteLogistics(siteId: string, pagination?: any): Promise<any[]> {
    try {
      let url = `/i_logistics?site_id=eq.${siteId}&select=*`;
      
      if (pagination?.order) {
        url += `&order=${pagination.order}`;
      }
      
      if (pagination?.limit) {
        url += `&limit=${pagination.limit}`;
      }
      
      if (pagination?.offset) {
        url += `&offset=${pagination.offset}`;
      }

      const response = await api.get(url);
      return response.data;
    } catch (error) {
      console.error('Error fetching site logistics:', error);
      throw error;
    }
  }

  async getSiteMachineUsage(siteId: string, pagination?: any): Promise<any[]> {
    try {
      let url = `/i_machine_usage?site_id=eq.${siteId}&select=*`;
      
      if (pagination?.order) {
        url += `&order=${pagination.order}`;
      }
      
      if (pagination?.limit) {
        url += `&limit=${pagination.limit}`;
      }
      
      if (pagination?.offset) {
        url += `&offset=${pagination.offset}`;
      }

      const response = await api.get(url);
      return response.data;
    } catch (error) {
      console.error('Error fetching site machine usage:', error);
      throw error;
    }
  }
}

export default new SitesService();

================
File: src/lib/index.ts
================
// Centralized barrel exports for all lib services and types
// This allows clean imports like: import { sitesService, type Site } from '$lib';

// Services
export { default as apiService } from './services/api';
export { default as sitesService } from './services/sites';
export { default as removalsService } from './services/removals';
export { default as materialsService } from './services/materials';
export { default as arrivalDocumentsService } from './services/arrival-documents';

// Types from sites service
export type {
	Site,
	SiteType,
	LandUse,
	Stage,
	Company,
	GetSitesParams,
	RecentActivities
} from './services/sites';

// Types from removals service
export type {
	Removal,
	RemovalCreate,
	RemovalUpdate,
	GetRemovalsParams,
	DisposalMethod,
	DisposalFacility,
	Submaterial
} from './services/removals';

// Types from materials service
export type {
	Material,
	Item,
	PaginationParams,
	FilterParams
} from './services/materials';

// Types from arrival documents service
export type {
	ArrivalDocument,
	ArrivalDocumentCreate,
	ArrivalDocumentUpdate,
	GetArrivalDocumentsParams
} from './services/arrival-documents';

================
File: src/routes/arrival_documents/[id]/edit/+page.svelte
================
<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  import arrivalDocumentsService, { type ArrivalDocument, type ArrivalDocumentUpdate, type Site } from '$lib/services/arrival-documents';
  
  // State variables
  let arrivalDocument: ArrivalDocument | null = null;
  let sites: Site[] = [];
  let loading = true;
  let saving = false;
  let error: string | null = null;
  let validationErrors: Record<string, string> = {};
  
  // Form data
  let formData: ArrivalDocumentUpdate = {
    delivery_date: '',
    arrival_doc_name: '',
    arrival_doc_description: '',
    arrival_doc_text: '',
    site_id: '',
    is_valid: false
  };
  
  // Get document ID from URL
  $: documentId = $page.params.id;
  
  // Load document and reference data
  async function loadData() {
    if (!documentId) return;
    
    loading = true;
    error = null;
    try {
      const [docData, sitesData] = await Promise.all([
        arrivalDocumentsService.getArrivalDocument(documentId),
        arrivalDocumentsService.getSites()
      ]);
      
      arrivalDocument = docData;
      sites = sitesData;
      
      // Populate form with existing data
      formData = {
        delivery_date: docData.delivery_date || '',
        arrival_doc_name: docData.arrival_doc_name || '',
        arrival_doc_description: docData.arrival_doc_description || '',
        arrival_doc_text: docData.arrival_doc_text || '',
        site_id: docData.site_id || '',
        is_valid: docData.is_valid || false
      };
    } catch (err) {
      console.error('Error loading data', err);
      error = 'Failed to load arrival document. Please try again later.';
    } finally {
      loading = false;
    }
  }
  
  // Validate form
  function validateForm(): boolean {
    validationErrors = {};
    
    if (!formData.arrival_doc_name?.trim()) {
      validationErrors.arrival_doc_name = 'Document name is required';
    }
    
    if (!formData.site_id) {
      validationErrors.site_id = 'Site is required';
    }
    
    if (formData.delivery_date && isNaN(Date.parse(formData.delivery_date))) {
      validationErrors.delivery_date = 'Invalid date format';
    }
    
    return Object.keys(validationErrors).length === 0;
  }
  
  // Handle form submission
  async function handleSubmit() {
    if (!validateForm()) return;
    
    saving = true;
    error = null;
    try {
      await arrivalDocumentsService.updateArrivalDocument(documentId, formData);
      goto(`/arrival_documents/${documentId}`);
    } catch (err) {
      console.error('Error updating arrival document', err);
      error = 'Failed to update arrival document. Please try again.';
    } finally {
      saving = false;
    }
  }
  
  // Navigate back without saving
  function goBack() {
    goto(`/arrival_documents/${documentId}`);
  }
  
  // Format date for input
  function formatDateForInput(dateString: string | null): string {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toISOString().split('T')[0];
  }
  
  onMount(() => {
    loadData();
  });
</script>

<div class="container mx-auto p-6">
  <!-- Loading State -->
  {#if loading}
    <div class="flex justify-center items-center py-8">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      <span class="ml-2 text-gray-600">Loading arrival document...</span>
    </div>
  {:else if error && !arrivalDocument}
    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-red-700">{error}</p>
        </div>
      </div>
    </div>
  {:else}
    <!-- Navigation -->
    <div class="mb-6">
      <button
        on:click={goBack}
        class="text-blue-600 hover:text-blue-900 transition-colors flex items-center"
      >
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Back to Document
      </button>
    </div>

    <!-- Page Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Edit Arrival Document</h1>
      <p class="text-gray-600 mt-2">Update the arrival document information</p>
    </div>

    <!-- Error Message -->
    {#if error}
      <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-red-700">{error}</p>
          </div>
        </div>
      </div>
    {/if}

    <!-- Form -->
    <div class="bg-white shadow rounded-lg">
      <form on:submit|preventDefault={handleSubmit} class="p-6 space-y-6">
        <!-- Document Name -->
        <div>
          <label for="arrival_doc_name" class="block text-sm font-medium text-gray-700 mb-1">
            Document Name *
          </label>
          <input
            type="text"
            id="arrival_doc_name"
            bind:value={formData.arrival_doc_name}
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            class:border-red-500={validationErrors.arrival_doc_name}
            placeholder="Enter document name"
            required
          />
          {#if validationErrors.arrival_doc_name}
            <p class="text-red-600 text-sm mt-1">{validationErrors.arrival_doc_name}</p>
          {/if}
        </div>

        <!-- Site -->
        <div>
          <label for="site_id" class="block text-sm font-medium text-gray-700 mb-1">
            Site *
          </label>
          <select
            id="site_id"
            bind:value={formData.site_id}
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            class:border-red-500={validationErrors.site_id}
            required
          >
            <option value="">Select a site</option>
            {#each sites as site}
              <option value={site.site_id}>{site.site_name}</option>
            {/each}
          </select>
          {#if validationErrors.site_id}
            <p class="text-red-600 text-sm mt-1">{validationErrors.site_id}</p>
          {/if}
        </div>

        <!-- Delivery Date -->
        <div>
          <label for="delivery_date" class="block text-sm font-medium text-gray-700 mb-1">
            Arrival Date
          </label>
          <input
            type="date"
            id="delivery_date"
            bind:value={formData.delivery_date}
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            class:border-red-500={validationErrors.delivery_date}
          />
          {#if validationErrors.delivery_date}
            <p class="text-red-600 text-sm mt-1">{validationErrors.delivery_date}</p>
          {/if}
        </div>

        <!-- Description -->
        <div>
          <label for="arrival_doc_description" class="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            id="arrival_doc_description"
            bind:value={formData.arrival_doc_description}
            rows="3"
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter document description"
          ></textarea>
        </div>

        <!-- Document Text -->
        <div>
          <label for="arrival_doc_text" class="block text-sm font-medium text-gray-700 mb-1">
            Document Content
          </label>
          <textarea
            id="arrival_doc_text"
            bind:value={formData.arrival_doc_text}
            rows="6"
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter document content"
          ></textarea>
        </div>

        <!-- Document Data Valid -->
        <div>
          <div class="flex items-center">
            <input
              type="checkbox"
              id="is_valid"
              bind:checked={formData.is_valid}
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label for="is_valid" class="ml-2 block text-sm font-medium text-gray-700">
              Document Data Valid
            </label>
          </div>
          <p class="text-sm text-gray-500 mt-1">Check this box if the document data has been validated</p>
        </div>

        <!-- Form Actions -->
        <div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
          <button
            type="button"
            on:click={goBack}
            class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={saving}
            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {#if saving}
              <div class="flex items-center">
                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Saving...
              </div>
            {:else}
              Save Changes
            {/if}
          </button>
        </div>
      </form>
    </div>
  {/if}
</div>

================
File: src/routes/arrival_documents/[id]/+page.svelte
================
<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  import arrivalDocumentsService, { type ArrivalDocument } from '$lib/services/arrival-documents';
  
  // State variables
  let arrivalDocument: ArrivalDocument | null = null;
  let materials: any[] = [];
  let loading = true;
  let error: string | null = null;
  let updatingValidation = false;
  
  // Get document ID from URL
  $: documentId = $page.params.id;
  
  // Computed validation status based on materials
  $: isDocumentValid = materials.length > 0 && materials.every(material => material.is_valid === true);
  
  // Check if validation status has changed
  $: if (arrivalDocument && arrivalDocument.is_validated !== isDocumentValid) {
    // Auto-update the document validation status if it differs from computed value
    updateDocumentValidationStatus(isDocumentValid);
  }
  
  // Load document data
  async function loadDocument() {
    if (!documentId) return;
    
    loading = true;
    error = null;
    try {
      const [docData, materialsData] = await Promise.all([
        arrivalDocumentsService.getArrivalDocument(documentId),
        arrivalDocumentsService.getArrivalDocumentMaterials(documentId)
      ]);
      
      arrivalDocument = docData;
      materials = materialsData;
    } catch (err) {
      console.error('Error loading arrival document', err);
      error = 'Failed to load arrival document. Please try again later.';
    } finally {
      loading = false;
    }
  }
  
  // Navigate to edit page
  function editDocument() {
    goto(`/arrival_documents/${documentId}/edit`);
  }
  
  // Navigate back to list
  function goBack() {
    goto('/arrival_documents');
  }
  
  // Format date for display
  function formatDate(dateString: string | null): string {
    if (!dateString) return '-';
    return new Date(dateString).toLocaleDateString();
  }
  
  // Format currency
  function formatCurrency(amount: number | null): string {
    if (amount === null || amount === undefined) return '-';
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  }
  
  // Format percentage
  function formatPercentage(value: number | null): string {
    if (value === null || value === undefined) return '-';
    return `${Math.round(value * 100)}%`;
  }
  
  // Toggle validation status
  function toggleValidation() {
    // TO DO: implement validation toggle logic
  }
  
  // View material
  function viewMaterial(materialId: number) {
    goto(`/materials/${materialId}`);
  }
  
  // Edit material
  function editMaterial(materialId: number) {
    goto(`/materials/${materialId}/edit`);
  }
  
  // Update document validation status
  async function updateDocumentValidationStatus(isValid: boolean) {
    try {
      await arrivalDocumentsService.updateArrivalDocumentValidationStatus(documentId, isValid);
      arrivalDocument.is_validated = isValid;
    } catch (err) {
      console.error('Error updating document validation status', err);
    }
  }
  
  onMount(() => {
    loadDocument();
  });
</script>

<div class="container mx-auto p-6">
  <!-- Loading and Error States -->
  {#if loading}
    <div class="flex justify-center items-center py-8">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      <span class="ml-2 text-gray-600">Loading arrival document...</span>
    </div>
  {:else if error}
    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-red-700">{error}</p>
        </div>
      </div>
    </div>
  {:else if arrivalDocument}
    <!-- Navigation -->
    <div class="mb-6">
      <button
        on:click={goBack}
        class="text-blue-600 hover:text-blue-900 transition-colors flex items-center"
      >
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Back to Arrival Documents
      </button>
    </div>

    <!-- Document Header - Top Row with Two Columns -->
    <div class="bg-white shadow rounded-lg overflow-hidden mb-6">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 p-6">
        <!-- Left Column: Document Name -->
        <div class="flex-1">
          <h1 class="text-4xl font-bold text-gray-900 mb-4">
            {arrivalDocument.arrival_doc_name || 'Unnamed Document'}
          </h1>
          {#if arrivalDocument.arrival_doc_description}
            <p class="text-lg text-gray-600 mb-4">{arrivalDocument.arrival_doc_description}</p>
          {/if}
          {#if arrivalDocument.arrival_doc_text}
            <div class="mt-4">
              <h3 class="text-lg font-medium text-gray-900 mb-2">Document Content</h3>
              <div class="bg-gray-50 rounded-lg p-4">
                <p class="text-gray-700 whitespace-pre-wrap">{arrivalDocument.arrival_doc_text}</p>
              </div>
            </div>
          {/if}
        </div>
        
        <!-- Right Column: Document Attributes -->
        <div class="bg-gray-50 rounded-lg p-6">
          <h3 class="text-xl font-medium text-gray-900 mb-6">Document Attributes</h3>
          
          <div class="space-y-4">
            
            <div class="flex justify-between items-center">
              <span class="text-sm font-medium text-gray-500">Site</span>
              <span class="text-sm text-gray-900">{arrivalDocument.site_name || '-'}</span>
            </div>
            
            <div class="flex justify-between items-center">
              <span class="text-sm font-medium text-gray-500">Arrival Date</span>
              <span class="text-sm text-gray-900">{formatDate(arrivalDocument.delivery_date)}</span>
            </div>
            
            <div class="flex justify-between items-center">
              <span class="text-sm font-medium text-gray-500">Document Data Valid</span>
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium {arrivalDocument.is_valid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                {#if arrivalDocument.is_valid}
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                  Valid
                {:else}
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                  Invalid
                {/if}
              </span>
            </div>
            
            <!-- Editable Validation Status -->
            <div class="flex justify-between items-center">
              <span class="text-sm font-medium text-gray-500">All materials validated:</span>
              <div class="flex items-center space-x-2">
                <button
                  on:click={toggleValidation}
                  class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium transition-colors {isDocumentValid ? 'bg-green-100 text-green-800 hover:bg-green-200' : 'bg-red-100 text-red-800 hover:bg-red-200'}"
                >
                  {#if isDocumentValid}
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Validated
                  {:else}
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                    Invalid
                  {/if}
                </button>
              </div>
            </div>
          </div>
          
          <!-- Edit Link -->
          <div class="mt-6 pt-4 border-t border-gray-200">
            <button
              on:click={editDocument}
              class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
            >
              Edit Document
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Materials Table - Bottom Row (Single Column) -->
    <div class="bg-white shadow rounded-lg overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-xl font-medium text-gray-900">Associated Materials</h3>
        <p class="text-sm text-gray-500 mt-1">Materials linked to this arrival document</p>
      </div>
      
      {#if materials.length > 0}
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Valid
                </th>
                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Quantity
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Arrival Doc Item
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Item
                </th>
                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Waste %
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Unit Cost
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Total Cost
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Site
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {#each materials as material}
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    {#if material.is_valid === true}
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        Valid
                      </span>
                    {:else}
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                        Invalid
                      </span>
                    {/if}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                    {material.quantity || '-'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {material.arrival_doc_item_name || 'N/A'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {material.item_name || 'N/A'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                    {material.default_waste_pct ? (material.default_waste_pct * 100).toFixed(0) + '%' : 'N/A'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {formatCurrency(material.unit_cost)}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {formatCurrency(material.total_cost)}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {material.site_name || 'N/A'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex space-x-2">
                      <button
                        on:click={() => viewMaterial(material.material_entry_id)}
                        class="text-blue-600 hover:text-blue-900 transition-colors"
                      >
                        View
                      </button>
                      <button
                        on:click={() => editMaterial(material.material_entry_id)}
                        class="text-yellow-600 hover:text-yellow-900 transition-colors"
                      >
                        Edit
                      </button>
                    </div>
                  </td>
                </tr>
              {/each}
            </tbody>
          </table>
        </div>
      {:else}
        <div class="text-center py-8">
          <p class="text-gray-500">No materials associated with this arrival document.</p>
        </div>
      {/if}
    </div>
  {/if}
</div>

================
File: src/routes/arrival_documents/new/+page.svelte
================
<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import arrivalDocumentsService, { type ArrivalDocumentCreate, type Site } from '$lib/services/arrival-documents';
  
  // State variables
  let sites: Site[] = [];
  let loading = true;
  let saving = false;
  let error: string | null = null;
  let validationErrors: Record<string, string> = {};
  
  // Form data
  let formData: ArrivalDocumentCreate = {
    delivery_date: '',
    arrival_doc_name: '',
    arrival_doc_description: '',
    arrival_doc_text: '',
    site_id: ''
  };
  
  // Load reference data
  async function loadData() {
    loading = true;
    error = null;
    try {
      sites = await arrivalDocumentsService.getSites();
    } catch (err) {
      console.error('Error loading sites', err);
      error = 'Failed to load sites. Please try again later.';
    } finally {
      loading = false;
    }
  }
  
  // Validate form
  function validateForm(): boolean {
    validationErrors = {};
    
    if (!formData.arrival_doc_name?.trim()) {
      validationErrors.arrival_doc_name = 'Document name is required';
    }
    
    if (!formData.site_id) {
      validationErrors.site_id = 'Site is required';
    }
    
    if (formData.delivery_date && isNaN(Date.parse(formData.delivery_date))) {
      validationErrors.delivery_date = 'Invalid date format';
    }
    
    return Object.keys(validationErrors).length === 0;
  }
  
  // Handle form submission
  async function handleSubmit() {
    if (!validateForm()) return;
    
    saving = true;
    error = null;
    try {
      const newDocument = await arrivalDocumentsService.createArrivalDocument(formData);
      goto(`/arrival_documents/${newDocument.arrival_doc_id}`);
    } catch (err) {
      console.error('Error creating arrival document', err);
      error = 'Failed to create arrival document. Please try again.';
    } finally {
      saving = false;
    }
  }
  
  // Navigate back without saving
  function goBack() {
    goto('/arrival_documents');
  }
  
  onMount(() => {
    loadData();
  });
</script>

<div class="container mx-auto p-6">
  <!-- Loading State -->
  {#if loading}
    <div class="flex justify-center items-center py-8">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      <span class="ml-2 text-gray-600">Loading...</span>
    </div>
  {:else if error && sites.length === 0}
    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-red-700">{error}</p>
        </div>
      </div>
    </div>
  {:else}
    <!-- Navigation -->
    <div class="mb-6">
      <button
        on:click={goBack}
        class="text-blue-600 hover:text-blue-900 transition-colors flex items-center"
      >
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        Back to Arrival Documents
      </button>
    </div>

    <!-- Page Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Create New Arrival Document</h1>
      <p class="text-gray-600 mt-2">Add a new arrival document to the system</p>
    </div>

    <!-- Error Message -->
    {#if error}
      <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-red-700">{error}</p>
          </div>
        </div>
      </div>
    {/if}

    <!-- Form -->
    <div class="bg-white shadow rounded-lg">
      <form on:submit|preventDefault={handleSubmit} class="p-6 space-y-6">
        <!-- Document Name -->
        <div>
          <label for="arrival_doc_name" class="block text-sm font-medium text-gray-700 mb-1">
            Document Name *
          </label>
          <input
            type="text"
            id="arrival_doc_name"
            bind:value={formData.arrival_doc_name}
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            class:border-red-500={validationErrors.arrival_doc_name}
            placeholder="Enter document name"
            required
          />
          {#if validationErrors.arrival_doc_name}
            <p class="text-red-600 text-sm mt-1">{validationErrors.arrival_doc_name}</p>
          {/if}
        </div>

        <!-- Site -->
        <div>
          <label for="site_id" class="block text-sm font-medium text-gray-700 mb-1">
            Site *
          </label>
          <select
            id="site_id"
            bind:value={formData.site_id}
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            class:border-red-500={validationErrors.site_id}
            required
          >
            <option value="">Select a site</option>
            {#each sites as site}
              <option value={site.site_id}>{site.site_name}</option>
            {/each}
          </select>
          {#if validationErrors.site_id}
            <p class="text-red-600 text-sm mt-1">{validationErrors.site_id}</p>
          {/if}
        </div>

        <!-- Delivery Date -->
        <div>
          <label for="delivery_date" class="block text-sm font-medium text-gray-700 mb-1">
            Arrival Date
          </label>
          <input
            type="date"
            id="delivery_date"
            bind:value={formData.delivery_date}
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            class:border-red-500={validationErrors.delivery_date}
          />
          {#if validationErrors.delivery_date}
            <p class="text-red-600 text-sm mt-1">{validationErrors.delivery_date}</p>
          {/if}
        </div>

        <!-- Description -->
        <div>
          <label for="arrival_doc_description" class="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            id="arrival_doc_description"
            bind:value={formData.arrival_doc_description}
            rows="3"
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter document description"
          ></textarea>
        </div>

        <!-- Document Text -->
        <div>
          <label for="arrival_doc_text" class="block text-sm font-medium text-gray-700 mb-1">
            Document Content
          </label>
          <textarea
            id="arrival_doc_text"
            bind:value={formData.arrival_doc_text}
            rows="6"
            class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Enter document content"
          ></textarea>
        </div>

        <!-- Form Actions -->
        <div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
          <button
            type="button"
            on:click={goBack}
            class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={saving}
            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {#if saving}
              <div class="flex items-center">
                <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Creating...
              </div>
            {:else}
              Create Document
            {/if}
          </button>
        </div>
      </form>
    </div>
  {/if}
</div>

================
File: src/routes/arrival_documents/+page.svelte
================
<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import { 
    arrivalDocumentsService, 
    type ArrivalDocument, 
    type GetArrivalDocumentsParams, 
    type Site 
  } from '$lib';

  // State variables
  let arrivalDocuments: ArrivalDocument[] = [];
  let loading = true;
  let error: string | null = null;

  // Pagination state
  let currentPage = 1;
  let limit = 10;
  let totalPages = 0;
  let totalCount = 0;

  // Filter state
  let selectedSiteId: string = '';
  let sortBy: string = 'delivery_date';
  let sortOrder: 'asc' | 'desc' = 'desc';
  let sites: Site[] = [];

  // Load arrival documents data
  async function loadArrivalDocuments() {
    loading = true;
    error = null;
    try {
      const params: GetArrivalDocumentsParams = {
        page: currentPage,
        limit: limit,
        siteId: selectedSiteId || undefined,
        sortBy: sortBy,
        sortOrder: sortOrder
      };
      
      const response = await arrivalDocumentsService.getArrivalDocuments(params);
      arrivalDocuments = response.data;
      totalPages = response.totalPages;
      totalCount = response.totalCount;
    } catch (err) {
      console.error('Error loading arrival documents', err);
      error = 'Failed to load arrival documents. Please try again later.';
    } finally {
      loading = false;
    }
  }

  // Load reference data for filters
  async function loadReferenceData() {
    try {
      sites = await arrivalDocumentsService.getSites();
    } catch (err) {
      console.error('Error loading reference data', err);
    }
  }

  // Handle sorting
  function handleSort(column: string) {
    if (sortBy === column) {
      sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
    } else {
      sortBy = column;
      sortOrder = 'asc';
    }
    currentPage = 1; // Reset to first page when sorting
    loadArrivalDocuments();
  }

  // Handle site filter change
  function handleSiteFilter() {
    currentPage = 1; // Reset to first page when filtering
    loadArrivalDocuments();
  }

  // Handle page change
  function handlePageChange(newPage: number) {
    currentPage = newPage;
    loadArrivalDocuments();
  }

  // Navigate to view page
  function viewDocument(id: string) {
    goto(`/arrival_documents/${id}`);
  }

  // Navigate to create page
  function createDocument() {
    goto('/arrival_documents/new');
  }

  // Get sort icon
  function getSortIcon(column: string): string {
    if (sortBy !== column) return '↕️';
    return sortOrder === 'asc' ? '↑' : '↓';
  }

  // Format date
  function formatDate(dateString: string | null): string {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  }

  // Check if document is validated (all materials are valid)
  function isValidated(doc: ArrivalDocument): boolean {
    return doc.computed_is_valid || false;
  }

  // Initialize data on mount
  onMount(() => {
    loadReferenceData();
    loadArrivalDocuments();
  });
</script>

<div class="container mx-auto p-6">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold text-gray-900">Arrival Documents</h1>
    <button
      on:click={createDocument}
      class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
    >
      Create Arrival Document
    </button>
  </div>

  <!-- Filters -->
  <div class="bg-white p-4 rounded-lg shadow mb-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Filters</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div>
        <label for="site-filter" class="block text-sm font-medium text-gray-700 mb-1">Site</label>
        <select
          id="site-filter"
          bind:value={selectedSiteId}
          on:change={handleSiteFilter}
          class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="">All Sites</option>
          {#each sites as site}
            <option value={site.site_id}>{site.site_name}</option>
          {/each}
        </select>
      </div>
    </div>
  </div>

  <!-- Loading and Error States -->
  {#if loading}
    <div class="flex justify-center items-center py-8">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      <span class="ml-2 text-gray-600">Loading arrival documents...</span>
    </div>
  {:else if error}
    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-red-700">{error}</p>
        </div>
      </div>
    </div>
  {:else}
    <!-- Data Table -->
    <div class="bg-white shadow rounded-lg overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
              on:click={() => handleSort('site_name')}
            >
              Site {getSortIcon('site_name')}
            </th>
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
              on:click={() => handleSort('arrival_doc_name')}
            >
              Name {getSortIcon('arrival_doc_name')}
            </th>
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
              on:click={() => handleSort('delivery_date')}
            >
              Arrival Date {getSortIcon('delivery_date')}
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Doc Data
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Materials Data
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {#each arrivalDocuments as document}
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                {document.site_name || '-'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                {document.arrival_doc_name || '-'}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                {formatDate(document.delivery_date)}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                {#if isValidated(document)}
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Valid
                  </span>
                {:else}
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                    Invalid
                  </span>
                {/if}
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                {#if isValidated(document)}
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Validated
                  </span>
                {:else}
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                    Invalid
                  </span>
                {/if}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button
                  on:click={() => viewDocument(document.arrival_doc_id)}
                  class="text-blue-600 hover:text-blue-900 transition-colors"
                >
                  View
                </button>
              </td>
            </tr>
          {/each}
        </tbody>
      </table>
      
      {#if arrivalDocuments.length === 0}
        <div class="text-center py-8">
          <p class="text-gray-500">No arrival documents found.</p>
        </div>
      {/if}
    </div>

    <!-- Pagination -->
    {#if totalPages > 1}
      <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
        <div class="flex-1 flex justify-between sm:hidden">
          <button
            on:click={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
            class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Previous
          </button>
          <button
            on:click={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
            class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Next
          </button>
        </div>
        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
          <div>
            <p class="text-sm text-gray-700">
              Showing
              <span class="font-medium">{(currentPage - 1) * limit + 1}</span>
              to
              <span class="font-medium">{Math.min(currentPage * limit, totalCount)}</span>
              of
              <span class="font-medium">{totalCount}</span>
              results
            </p>
          </div>
          <div>
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              <button
                on:click={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Previous
              </button>
              <button
                on:click={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Next
              </button>
            </nav>
          </div>
        </div>
      </div>
    {/if}
  {/if}
</div>

================
File: src/routes/login/+page.server.ts
================
import { AUTH_USERS } from '../../config/auth';
import { redirect, fail } from '@sveltejs/kit';

export const actions = {
  default: async ({ request, cookies }: { request: Request; cookies: any }) => {
    let username: string, password: string;
    const contentType = request.headers.get('content-type') || '';
    if (contentType.includes('application/json')) {
      const data = await request.json();
      username = data.username;
      password = data.password;
    } else {
      const form = await request.formData();
      username = form.get('username') as string;
      password = form.get('password') as string;
    }
    const user = AUTH_USERS.find(u => u.username === username && u.password === password);
    if (user) {
      cookies.set('auth_token', user.username, {
        path: '/',
        httpOnly: true,
        sameSite: 'lax',
        maxAge: 60 * 60 * 8 // 8 hours
      });
      throw redirect(303, '/');
    }
    return fail(401, { error: 'Invalid username or password' });
  }
};

================
File: src/routes/login/+page.svelte
================
<script lang="ts">
  let username = $state('');
  let password = $state('');
  let error = $state('');
  let logoLoaded = $state(true);
</script>

<div class="flex items-center justify-center min-h-screen bg-base-200">
  <form class="bg-base-100 p-8 rounded shadow-md w-full max-w-sm" method="POST">
    <div class="flex flex-col items-center mb-6">
      {#if logoLoaded}
  <img src="/logo.png" alt="Logo" class="w-20 h-20 mb-2" onerror={() => logoLoaded = false} />
  <h1 class="text-2xl font-bold">Sign In</h1>
{:else}
  <div class="w-20 h-20 flex items-center justify-center mb-2 bg-base-100 rounded-full border border-base-300">
    <span class="text-3xl font-extrabold text-primary">WasteX</span>
  </div>
  <h1 class="text-2xl font-bold">Sign In</h1>
{/if}
    </div>
    {#if error}
  <div class="alert alert-error mb-4">{typeof error === 'string' ? error : 'Login failed. Please try again.'}</div>
{/if}
    <div class="mb-4">
      <label class="label" for="username">Username</label>
      <input
        id="username"
        name="username"
        type="text"
        placeholder="Username"
        class="input input-bordered w-full"
        bind:value={username}
        autocomplete="username"
        required
      />
    </div>
    <div class="mb-6">
      <label class="label" for="password">Password</label>
      <input
        id="password"
        name="password"
        type="password"
        placeholder="Password"
        class="input input-bordered w-full"
        bind:value={password}
        autocomplete="current-password"
        required
      />
    </div>
    <button class="btn btn-primary w-full" type="submit">
  Sign In
</button>
  </form>
</div>

================
File: src/routes/logout/+server.ts
================
import { redirect } from '@sveltejs/kit';

export async function GET({ cookies }) {
  cookies.delete('auth_token', { path: '/' });
  throw redirect(303, '/login');
}

================
File: src/routes/materials/[id]/edit/+page.svelte
================
<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import { page } from '$app/stores';
  import materialsService, { type Material, type Item, type ArrivalDocument } from '$lib/services/materials';
  
  // Get material ID from the URL parameter
  const materialId = $page.params.id;
  const isNewMaterial = materialId === 'new';
  
  // State variables
  let material: Partial<Material> = isNewMaterial ? {
    is_valid: false
  } : {};
  let loading = true;
  let saving = false;
  let error: string | null = null;
  let saveSuccess = false;
  
  // For percentage display (convert from decimal to whole number percent)
  let editWastePct: number | null = null;
  
  // Reference data
  let sites: Array<{ site_id: string; site_name: string }> = [];
  let submaterials: Array<{ submaterial_id: string; submaterial_name: string }> = [];
  let units: Array<{ unit_id: string; unit_name: string }> = [];
  let suppliers: Array<{ supplier_id: string; supplier_name: string }> = [];
  let stages: Array<{ stage_id: string; stage_name: string }> = [];
  let items: Array<{ item_id: string; item_name: string }> = [];
  let arrivalDocuments: Array<{ arrival_doc_id: string; arrival_doc_name: string }> = [];
  
  // Load material data if editing existing
  async function loadMaterial() {
    loading = true;
    error = null;
    
    try {
      if (!isNewMaterial) {
        const loadedMaterial = await materialsService.getMaterial(materialId);
        
        if (!loadedMaterial) {
          error = 'Material not found';
          return;
        }
        
        material = { ...loadedMaterial };
        
        // Convert waste percentage from decimal to display percentage
        if (material.default_waste_pct !== undefined && material.default_waste_pct !== null) {
          editWastePct = Math.round(material.default_waste_pct * 100);
        }
      }
      
      // Load reference data
      [sites, submaterials, units, suppliers, stages, items, arrivalDocuments] = await Promise.all([
        materialsService.getSites(),
        materialsService.getSubmaterials(),
        materialsService.getUnits(),
        materialsService.getSuppliers(),
        materialsService.getStages(),
        materialsService.getItems(),
        materialsService.getArrivalDocuments()
      ]);
      
    } catch (err) {
      console.error('Error loading data', err);
      error = 'Failed to load data. Please try again later.';
    } finally {
      loading = false;
    }
  }
  
  // Save material
  // Convert waste percentage back to decimal before saving
  function updateWastePercentage() {
    if (editWastePct !== null && editWastePct !== undefined) {
      material.default_waste_pct = editWastePct / 100;
    } else {
      material.default_waste_pct = null;
    }
  }
  
  async function saveMaterial() {
    // Convert percentage back to decimal before saving
    updateWastePercentage();
    saving = true;
    error = null;
    saveSuccess = false;
    
    try {
      // Validate required fields
      if (!material.site_id) {
        error = 'Site is required';
        return;
      }
      
      if (material.quantity === undefined || material.quantity === null) {
        error = 'Quantity is required';
        return;
      }
      
      if (!material.unit_id) {
        error = 'Unit is required';
        return;
      }
      
      console.log('Submitting material data:', JSON.stringify(material, null, 2));
      
      if (isNewMaterial) {
        const newMaterial = await materialsService.createMaterial(material as Omit<Material, 'material_entry_id'>);
        saveSuccess = true;
        // Redirect to the newly created material
        setTimeout(() => {
          goto(`/materials/${newMaterial.material_entry_id}`);
        }, 1500);
      } else {
        await materialsService.updateMaterial(materialId, material);
        saveSuccess = true;
        // Stay on the edit page to allow further edits
      }
    } catch (err: any) {
      console.error('Error saving material', err);
      // Enhanced error logging
      if (err && err.response && err.response.data) {
        console.error('Server error details:', err.response.data);
        error = `Failed to save: ${err.response.data.message || JSON.stringify(err.response.data)}`;
      } else {
        error = 'Failed to save material. Please try again later.';
      }
    } finally {
      saving = false;
    }
  }
  
  function cancel() {
    if (isNewMaterial) {
      goto('/materials');
    } else {
      goto(`/materials/${materialId}`);
    }
  }
  
  // Load data on component mount
  onMount(loadMaterial);
</script>

<div class="container mx-auto p-4">
  <div class="flex items-center mb-6">
    <button class="btn btn-ghost" on:click={() => goto('/materials')}>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
      Back to Materials
    </button>
  </div>
  
  <h1 class="text-2xl font-bold mb-6">
    {isNewMaterial ? 'Create New Material' : 'Edit Material'}
  </h1>
  
  {#if loading}
    <div class="flex justify-center items-center py-8">
      <span class="loading loading-spinner loading-lg"></span>
    </div>
  {:else if error && !saving}
    <div class="alert alert-error mb-6">
      <span>{error}</span>
    </div>
  {:else}
    <form on:submit|preventDefault={saveMaterial} class="bg-base-200 p-6 rounded-lg shadow-md">
      {#if saveSuccess}
        <div class="alert alert-success mb-6">
          <span>Material {isNewMaterial ? 'created' : 'updated'} successfully!</span>
        </div>
      {/if}
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Site (Required) -->
        <div class="form-control w-full">
          <label for="site-input" class="label">
            <span class="label-text">Site *</span>
          </label>
          <select 
            id="site-input"
            class="select select-bordered w-full" 
            bind:value={material.site_id}
            required
          >
            <option value={undefined} disabled>Select Site</option>
            {#each sites as site}
              <option value={site.site_id}>{site.site_name}</option>
            {/each}
          </select>
        </div>
        
        <!-- Submaterial -->
        <div class="form-control w-full">
          <label for="submaterial-input" class="label">
            <span class="label-text">Submaterial</span>
          </label>
          <select 
            id="submaterial-input"
            class="select select-bordered w-full" 
            bind:value={material.submaterial_id}
          >
            <option value={undefined}>None</option>
            {#each submaterials as submaterial}
              <option value={submaterial.submaterial_id}>{submaterial.submaterial_name}</option>
            {/each}
          </select>
        </div>
        
        <!-- Quantity (Required) -->
        <div class="form-control w-full">
          <label for="quantity-input" class="label">
            <span class="label-text">Quantity *</span>
          </label>
          <input 
            id="quantity-input"
            type="number" 
            class="input input-bordered w-full" 
            step="0.01"
            bind:value={material.quantity}
            required
          />
        </div>
        
        <!-- Unit (Required) -->
        <div class="form-control w-full">
          <label for="unit-input" class="label">
            <span class="label-text">Unit *</span>
          </label>
          <select 
            id="unit-input"
            class="select select-bordered w-full" 
            bind:value={material.unit_id}
            required
          >
            <option value={undefined} disabled>Select Unit</option>
            {#each units as unit}
              <option value={unit.unit_id}>{unit.unit_name}</option>
            {/each}
          </select>
        </div>
        
        <!-- Weight -->
        <div class="form-control w-full">
          <label for="weight-input" class="label">
            <span class="label-text">Weight (kg)</span>
          </label>
          <input 
            id="weight-input"
            type="number" 
            class="input input-bordered w-full" 
            step="0.01"
            bind:value={material.weight_kg}
          />
        </div>
        
        <!-- Volume -->
        <div class="form-control w-full">
          <label for="volume-input" class="label">
            <span class="label-text">Volume (m³)</span>
          </label>
          <input 
            id="volume-input"
            type="number" 
            class="input input-bordered w-full" 
            step="0.01"
            bind:value={material.volume_m3}
          />
        </div>
        
        <!-- Cost Per Unit -->
        <div class="form-control w-full">
          <label for="cost-per-unit-input" class="label">
            <span class="label-text">Cost Per Unit</span>
          </label>
          <input 
            id="cost-per-unit-input"
            type="number" 
            class="input input-bordered w-full" 
            step="0.01"
            bind:value={material.cost_per_unit}
          />
        </div>
        
        <!-- Total Cost -->
        <div class="form-control w-full">
          <label for="total-cost-input" class="label">
            <span class="label-text">Total Cost</span>
          </label>
          <input 
            id="total-cost-input"
            type="number" 
            class="input input-bordered w-full" 
            step="0.01"
            bind:value={material.total_cost}
          />
        </div>
        
        <!-- Supplier -->
        <div class="form-control w-full">
          <label for="supplier-input" class="label">
            <span class="label-text">Supplier</span>
          </label>
          <select 
            id="supplier-input"
            class="select select-bordered w-full" 
            bind:value={material.supplier_id}
          >
            <option value={undefined}>None</option>
            {#each suppliers as supplier}
              <option value={supplier.supplier_id}>{supplier.supplier_name}</option>
            {/each}
          </select>
        </div>
        
        <!-- Delivery Date -->
        <div class="form-control w-full">
          <label for="delivery-date-input" class="label">
            <span class="label-text">Delivery Date</span>
          </label>
          <input 
            id="delivery-date-input"
            type="date" 
            class="input input-bordered w-full" 
            bind:value={material.delivery_date}
          />
        </div>
        
        <!-- Stage -->
        <div class="form-control w-full">
          <label for="stage-input" class="label">
            <span class="label-text">Stage</span>
          </label>
          <select 
            id="stage-input"
            class="select select-bordered w-full" 
            bind:value={material.stage_id}
          >
            <option value={undefined}>None</option>
            {#each stages as stage}
              <option value={stage.stage_id}>{stage.stage_name}</option>
            {/each}
          </select>
        </div>
        
        <!-- Item Selection -->
        <div class="form-control w-full">
          <label for="item-id-input" class="label">
            <span class="label-text">Item</span>
          </label>
          <select 
            id="item-id-input"
            class="select select-bordered w-full" 
            bind:value={material.item_id}
          >
            <option value={undefined}>None</option>
            {#each items as item}
              <option value={item.item_id}>{item.item_name}</option>
            {/each}
          </select>
        </div>
        
        <!-- Arrival Doc Item Name -->
        <div class="form-control w-full">
          <label for="arrival-doc-item-input" class="label">
            <span class="label-text">Arrival Doc Item</span>
          </label>
          <input 
            id="arrival-doc-item-input"
            type="text" 
            class="input input-bordered w-full" 
            bind:value={material.arrival_doc_item_name}
          />
        </div>
        
        <!-- Arrival Document -->
        <div class="form-control w-full">
          <label for="arrival-doc-id-input" class="label">
            <span class="label-text">Arrival Document</span>
          </label>
          <select 
            id="arrival-doc-id-input"
            class="select select-bordered w-full" 
            bind:value={material.arrival_doc_id}
          >
            <option value={undefined}>None</option>
            {#each arrivalDocuments as doc}
              <option value={doc.arrival_doc_id}>{doc.arrival_doc_name}</option>
            {/each}
          </select>
        </div>
        
        <!-- Is Valid -->
        <div class="form-control w-full">
          <label for="is-valid-input" class="label">
            <span class="label-text">Valid Status</span>
          </label>
          <div class="form-control">
            <label class="label cursor-pointer">
              <input 
                id="is-valid-input"
                type="checkbox" 
                class="checkbox checkbox-primary" 
                bind:checked={material.is_valid}
              />
              <span class="label-text ml-2">Is Valid</span>
            </label>
          </div>
        </div>
        
        <!-- Default Waste % -->
        <div class="form-control w-full">
          <label for="waste-pct-input" class="label">
            <span class="label-text">Default Waste %</span>
          </label>
          <div class="flex">
            <input 
              id="waste-pct-input"
              type="number" 
              class="input input-bordered w-full" 
              step="1"
              placeholder="Enter percentage"
              bind:value={editWastePct}
            />
            <span class="flex items-center px-3 bg-base-200">%</span>
          </div>
          <span class="label-text-alt mt-1">Enter the percentage as a whole number (e.g. 25 for 25%)</span>
        </div>
        
        <!-- PO ID -->
        <div class="form-control w-full">
          <label for="id-po-input" class="label">
            <span class="label-text">PO ID</span>
          </label>
          <input 
            id="id-po-input"
            type="text" 
            class="input input-bordered w-full" 
            bind:value={material.id_po}
          />
        </div>
      </div>
      
      <!-- Notes (full width) -->
      <div class="form-control w-full mt-6">
        <label for="notes-input" class="label">
          <span class="label-text">Notes</span>
        </label>
        <textarea 
          id="notes-input"
          class="textarea textarea-bordered h-24" 
          bind:value={material.notes}
        ></textarea>
      </div>
      
      <!-- Form Actions -->
      <div class="mt-8 flex justify-end gap-3">
        <button 
          type="button" 
          class="btn btn-outline" 
          on:click={cancel}
          disabled={saving}
        >
          Cancel
        </button>
        <button 
          type="submit" 
          class="btn btn-primary"
          disabled={saving}
        >
          {#if saving}
            <span class="loading loading-spinner"></span>
          {/if}
          {isNewMaterial ? 'Create Material' : 'Save Changes'}
        </button>
      </div>
      
      {#if error && saving}
        <div class="alert alert-error mt-4">
          <span>{error}</span>
        </div>
      {/if}
    </form>
  {/if}
</div>

================
File: src/routes/materials/[id]/+page.svelte
================
<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import { page } from '$app/stores';
  import materialsService, { type Material, type Item } from '$lib/services/materials';
  
  // Get material ID from the URL parameter
  const materialId = $page.params.id;
  
  // State variables
  let material: Material | null = null;
  let loading = true;
  let error: string | null = null;
  
  // Reference data for displaying names instead of IDs
  let siteName = '';
  let submaterialName = '';
  let unitName = '';
  let supplierName = '';
  let stageName = '';
  let itemName = '';
  
  // Define reference data types
  type Site = { site_id: string; site_name: string };
  type Submaterial = { submaterial_id: string; submaterial_name: string };
  type Unit = { unit_id: string; unit_name: string };
  type Supplier = { supplier_id: string; supplier_name: string };
  type Stage = { stage_id: string; stage_name: string };
  
  // Load material and reference data
  async function loadMaterial() {
    loading = true;
    error = null;
    
    try {
      material = await materialsService.getMaterial(materialId);
      
      if (!material) {
        error = 'Material not found';
        return;
      }
      
      // Load reference data to display names
      const [sites, submaterials, units, suppliers, stages] = await Promise.all([
        materialsService.getSites(),
        materialsService.getSubmaterials(),
        materialsService.getUnits(),
        materialsService.getSuppliers(),
        materialsService.getStages()
      ]);
      
      // Get names from reference data
      if (material) {
        // Using non-null assertion (!) since we've confirmed material is not null
        const materialRef = material!;
        
        siteName = sites.find((s: Site) => s.site_id === materialRef.site_id)?.site_name || 'Unknown';
        submaterialName = submaterials.find((s: Submaterial) => s.submaterial_id === materialRef.submaterial_id)?.submaterial_name || '';
        unitName = units.find((u: Unit) => u.unit_id === materialRef.unit_id)?.unit_name || 'Unknown';
        supplierName = suppliers.find((s: Supplier) => s.supplier_id === materialRef.supplier_id)?.supplier_name || '';
        stageName = stages.find((s: Stage) => s.stage_id === materialRef.stage_id)?.stage_name || '';
        
        // If material has item_name property from joined data, use it
        itemName = materialRef.item_name || '';
        
        // If not, and there's an item_id, try to fetch it
        if (!itemName && materialRef.item_id) {
          const items = await materialsService.getItems();
          const item = items.find((i: Item) => i.item_id === materialRef.item_id);
          if (item) {
            itemName = item.item_name;
          }
        }
      }
      
    } catch (err) {
      console.error('Error loading material', err);
      error = 'Failed to load material details. Please try again later.';
    } finally {
      loading = false;
    }
  }
  
  // Helper functions
  function goBack() {
    goto('/materials');
  }
  
  function goToEdit() {
    goto(`/materials/${materialId}/edit`);
  }
  
  // Delete material with confirmation
  let deleting = false;
  let deleteError: string | null = null;
  
  async function deleteMaterial() {
    const confirmed = confirm('Are you sure you want to delete this material? This action cannot be undone.');
    
    if (!confirmed) return;
    
    deleting = true;
    deleteError = null;
    
    try {
      await materialsService.deleteMaterial(materialId);
      // Redirect back to materials list after successful deletion
      goto('/materials');
    } catch (err: any) {
      console.error('Error deleting material:', err);
      if (err && err.response && err.response.data) {
        deleteError = `Failed to delete: ${err.response.data.message || JSON.stringify(err.response.data)}`;
      } else {
        deleteError = 'Failed to delete material. Please try again later.';
      }
      deleting = false;
    }
  }
  
  // Load data on component mount
  onMount(loadMaterial);
</script>

<div class="container mx-auto p-4">
  <div class="flex items-center mb-6">
    <button class="btn btn-ghost" on:click={goBack}>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
      Back to Materials
    </button>
  </div>
  
  {#if loading}
    <div class="flex justify-center items-center py-8">
      <span class="loading loading-spinner loading-lg"></span>
    </div>
  {:else if error}
    <div class="alert alert-error">
      <span>{error}</span>
    </div>
  {:else if material}
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Material Details</h1>
      <div class="flex gap-3">
        <button class="btn btn-error" on:click={deleteMaterial} disabled={deleting}>
          {#if deleting}
            <span class="loading loading-spinner loading-xs"></span>
          {/if}
          Delete Material
        </button>
        <button class="btn btn-warning" on:click={goToEdit}>Edit Material</button>
      </div>
    </div>
    
    {#if deleteError}
      <div class="alert alert-error mb-6">
        <span>{deleteError}</span>
      </div>
    {/if}
    
    <div class="bg-base-200 p-6 rounded-lg shadow-md">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- ID -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Material ID</h3>
          <p class="mt-1">{material!.material_entry_id}</p>
        </div>
        
        <!-- Site -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Site</h3>
          <p class="mt-1">{siteName}</p>
        </div>
        
        <!-- Submaterial -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Submaterial</h3>
          <p class="mt-1">{submaterialName || 'N/A'}</p>
        </div>
        
        <!-- Quantity -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Quantity</h3>
          <p class="mt-1">{material!.quantity}</p>
        </div>
        
        <!-- Unit -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Unit</h3>
          <p class="mt-1">{unitName}</p>
        </div>
        
        <!-- Weight -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Weight (kg)</h3>
          <p class="mt-1">{material!.weight_kg ?? 'N/A'}</p>
        </div>
        
        <!-- Volume -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Volume (m³)</h3>
          <p class="mt-1">{material!.volume_m3 ?? 'N/A'}</p>
        </div>
        
        <!-- Cost Per Unit -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Cost Per Unit</h3>
          <p class="mt-1">{material!.cost_per_unit ?? 'N/A'}</p>
        </div>
        
        <!-- Total Cost -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Total Cost</h3>
          <p class="mt-1">{material!.total_cost ?? 'N/A'}</p>
        </div>
        
        <!-- Supplier -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Supplier</h3>
          <p class="mt-1">{supplierName || 'N/A'}</p>
        </div>
        
        <!-- Delivery Date -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Delivery Date</h3>
          <p class="mt-1">{material!.delivery_date ?? 'N/A'}</p>
        </div>
        
        <!-- Stage -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Stage</h3>
          <p class="mt-1">{stageName || 'N/A'}</p>
        </div>
        
        <!-- Item -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Item</h3>
          <p class="mt-1">{itemName || 'N/A'}</p>
        </div>
        
        <!-- Item ID -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Item ID</h3>
          <p class="mt-1">{material!.item_id ?? 'N/A'}</p>
        </div>
        
        <!-- Arrival Doc Item Name -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Arrival Doc Item</h3>
          <p class="mt-1">{material!.arrival_doc_item_name ?? 'N/A'}</p>
        </div>
        
        <!-- Arrival Document -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Arrival Document</h3>
          <p class="mt-1">{material!.arrival_doc_name ?? 'N/A'}</p>
        </div>
        
        <!-- PO ID -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">PO ID</h3>
          <p class="mt-1">{material!.id_po ?? 'N/A'}</p>
        </div>
        
        <!-- Valid Status -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Validation Status</h3>
          <p class="mt-1">
            {#if material!.is_valid}
              <span class="badge badge-success">Valid</span>
            {:else}
              <span class="badge badge-error">Invalid</span>
            {/if}
          </p>
        </div>
        
        <!-- Waste Percentage -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500">Default Waste %</h3>
          <p class="mt-1">{material!.default_waste_pct ? (material!.default_waste_pct * 100).toFixed(0) : 'N/A'}</p>
        </div>
      </div>
      
      <!-- Notes (full width) -->
      <div class="mt-6">
        <h3 class="text-sm font-semibold text-gray-500">Notes</h3>
        <div class="mt-1 p-3 bg-base-100 rounded min-h-16">
          {material!.notes || 'No notes available'}
        </div>
      </div>
    </div>
  {/if}
</div>

================
File: src/routes/materials/new/+page.svelte
================
<script lang="ts">
  import { goto } from '$app/navigation';
  import { onMount } from 'svelte';
  
  // Redirect to the edit form with ID "new"
  onMount(() => {
    goto('/materials/new/edit');
  });
</script>

<div class="flex justify-center items-center h-screen">
  <span class="loading loading-spinner loading-lg"></span>
</div>

================
File: src/routes/materials/+page.svelte
================
<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  import { 
    materialsService, 
    type Material, 
    type PaginationParams, 
    type FilterParams 
  } from '$lib';
  
  // State variables
  let materials: Material[] = [];
  let loading = true;
  let error: string | null = null;
  
  // Pagination state
  let pagination: PaginationParams = {
    limit: 10,
    offset: 0,
    order: 'is_valid.asc'
  };
  let totalCount = 0;
  
  // Filter state
  let filters: FilterParams = {};
  let sites: Array<{ site_id: string; site_name: string }> = [];
  let arrivalDocuments: Array<{ arrival_doc_id: string; arrival_doc_name: string }> = [];
  
  // Load materials data
  async function loadMaterials() {
    loading = true;
    error = null;
    try {
      materials = await materialsService.getMaterials(pagination, filters);
      // In a real app, we would get total count from headers or a separate count endpoint
      // For now, we'll assume total count is available
      totalCount = materials.length >= pagination.limit ? 100 : materials.length;
    } catch (err) {
      console.error('Error loading materials', err);
      error = 'Failed to load materials. Please try again later.';
    } finally {
      loading = false;
    }
  }
  
  // Load reference data for filters
  async function loadReferenceData() {
    try {
      // Only load sites for filters
      sites = await materialsService.getSites();
      
      // Load arrival documents for the filter
      const arrivalDocs = await materialsService.getArrivalDocuments();
      // Add arrival documents to the component state
      arrivalDocuments = arrivalDocs;
    } catch (err) {
      console.error('Error loading reference data', err);
      error = 'Failed to load filter options. Some filters may not be available.';
    }
  }
  
  // Handle pagination
  function nextPage() {
    if (pagination.offset + pagination.limit < totalCount) {
      pagination.offset += pagination.limit;
      loadMaterials();
    }
  }
  
  function prevPage() {
    if (pagination.offset > 0) {
      pagination.offset = Math.max(0, pagination.offset - pagination.limit);
      loadMaterials();
    }
  }
  
  // Handle filters
  function resetFilters() {
    filters = {};
    pagination.offset = 0; // Reset to first page when filtering
    loadMaterials();
  }
  
  // Auto-apply filters when they change
  $: if (filters) {
    pagination.offset = 0; // Reset to first page when filtering
    loadMaterials();
  }
  
  // Navigate to material detail or edit
  function viewMaterial(id: string) {
    goto(`/materials/${id}`);
  }
  
  function editMaterial(id: string) {
    goto(`/materials/${id}/edit`);
  }
  
  function createNewMaterial() {
    goto('/materials/new');
  }
  
  // Component lifecycle
  onMount(async () => {
    await Promise.all([loadMaterials(), loadReferenceData()]);
  });
</script>

<div class="container mx-auto p-4">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold">Materials Validation</h1>
    <button 
      class="btn btn-primary" 
      on:click={createNewMaterial}
    >
      Create New Material
    </button>
  </div>
  
  <!-- Filters - Compact Layout -->
  <div class="bg-base-200 p-3 mb-6 rounded-lg">
    <div class="flex flex-wrap items-center gap-3">
      <!-- Site Filter -->
      <div style="min-width: 180px;">
        <label class="block text-xs mb-1" for="site-filter">Site</label>
        <select 
          id="site-filter"
          class="w-full border border-gray-300 rounded px-2 py-1 h-8" 
          bind:value={filters.site_id}
        >
          <option value={undefined}>All Sites</option>
          {#each sites as site}
            <option value={site.site_id}>{site.site_name}</option>
          {/each}
        </select>
      </div>
      
      <!-- Arrival Document Filter -->
      <div style="min-width: 180px;">
        <label class="block text-xs mb-1" for="arrival-doc-filter">Arrival Doc</label>
        <select 
          id="arrival-doc-filter"
          class="w-full border border-gray-300 rounded px-2 py-1 h-8" 
          bind:value={filters.arrival_doc_id}
        >
          <option value={undefined}>All Documents</option>
          {#each arrivalDocuments as doc}
            <option value={doc.arrival_doc_id}>{doc.arrival_doc_name}</option>
          {/each}
        </select>
      </div>
      
      <!-- Is Valid Filter -->
      <div style="width: 120px;">
        <label class="block text-xs mb-1" for="valid-filter">Valid</label>
        <select 
          id="valid-filter"
          class="w-full border border-gray-300 rounded px-2 py-1 h-8" 
          bind:value={filters.is_valid}
        >
          <option value={undefined}>All</option>
          <option value={true}>Valid</option>
          <option value={false}>Invalid</option>
        </select>
      </div>

      <!-- Filter Action Buttons -->
      <div class="flex gap-2 ml-auto">
        <button class="btn btn-sm btn-outline" on:click={resetFilters}>Reset</button>
      </div>
    </div>
  </div>
  
  <!-- Materials Table -->
  {#if loading}
    <div class="flex justify-center items-center py-8">
      <span class="loading loading-spinner loading-lg"></span>
    </div>
  {:else if error}
    <div class="alert alert-error">
      <span>{error}</span>
    </div>
  {:else if materials.length === 0}
    <div class="alert alert-info">
      <span>No materials found. Try adjusting your filters or create a new material.</span>
    </div>
  {:else}
    <div class="overflow-x-auto">
      <table class="table table-zebra w-full">
        <thead>
          <tr>
            <th>Valid</th>
            <th class="text-right">Quantity</th>
            <th>Arrival Doc Item</th>
            <th>Item</th>
            <th class="text-right">Waste %</th>
            <th>Site</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {#each materials as material}
            <tr>
              <td>
                {#if material.is_valid === true}
                  <span class="badge badge-success">Valid</span>
                {:else}
                  <span class="badge badge-error">Invalid</span>
                {/if}
              </td>
              <td class="text-right">{material.quantity}</td>
              <td>{material.arrival_doc_item_name || 'N/A'}</td>
              <td>{material.item_name || 'N/A'}</td>
              <td class="text-right">{material.default_waste_pct ? (material.default_waste_pct * 100).toFixed(0) : 'N/A'}</td>
              <td>{sites.find(s => s.site_id === material.site_id)?.site_name || material.site_id}</td>
              <td>
                <div class="flex gap-1">
                  <button 
                    class="btn btn-xs btn-info" 
                    on:click={() => viewMaterial(material.material_entry_id)}
                  >
                    View
                  </button>
                  <button 
                    class="btn btn-xs btn-warning" 
                    on:click={() => editMaterial(material.material_entry_id)}
                  >
                    Edit
                  </button>
                </div>
              </td>
            </tr>
          {/each}
        </tbody>
      </table>
    </div>
    
    <!-- Pagination -->
    <div class="flex justify-between items-center mt-4">
      <div>
        Showing {pagination.offset + 1}-{Math.min(pagination.offset + materials.length, totalCount)} of {totalCount} materials
      </div>
      <div class="join">
        <button 
          class="join-item btn" 
          disabled={pagination.offset === 0}
          on:click={prevPage}
        >
          Previous
        </button>
        <button 
          class="join-item btn" 
          disabled={pagination.offset + pagination.limit >= totalCount}
          on:click={nextPage}
        >
          Next
        </button>
      </div>
    </div>
  {/if}
</div>

================
File: src/routes/sites/[id]/deliveries/+page.svelte
================
<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import { goto } from '$app/navigation';
	import arrivalDocumentsService, { type ArrivalDocument } from '$lib/services/arrival-documents';
	import sitesService, { type Site } from '$lib/services/sites';

	let site = $state<Site | null>(null);
	let deliveries = $state<ArrivalDocument[]>([]);
	let loading = $state(true);
	let error = $state<string | null>(null);
	let currentPage = $state(1);
	let totalPages = $state(1);
	let sortBy = $state<string>('delivery_date');
	let sortOrder = $state<'asc' | 'desc'>('desc');

	let siteId = $derived($page.params.id);

	async function loadData() {
		if (!siteId) return;
		
		loading = true;
		error = null;
		
		try {
			console.log('Loading data for siteId:', siteId);
			const [siteData, deliveriesData] = await Promise.all([
				sitesService.getSiteById(siteId),
				arrivalDocumentsService.getArrivalDocuments({
					page: currentPage,
					limit: 10,
					siteId: siteId,
					sortBy,
					sortOrder
				})
			]);
			
			console.log('Site data:', siteData);
			console.log('Deliveries data:', deliveriesData);
			
			site = siteData;
			deliveries = deliveriesData.data;
			totalPages = deliveriesData.totalPages;
		} catch (err) {
			console.error('Error loading deliveries:', err);
			console.error('Error details:', { message: (err as Error).message, response: (err as any).response, status: (err as any).status });
			error = 'Failed to load deliveries. Please try again later.';
		} finally {
			loading = false;
		}
	}

	function loadDeliveries() {
		loadData();
	}

	onMount(() => {
		loadData();
	});

	// Reactive loading when parameters change
	$effect(() => {
		if (siteId) {
			loadData();
		}
	});

	function handleSort(column: string) {
		if (sortBy === column) {
			sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
		} else {
			sortBy = column;
			sortOrder = 'asc';
		}
	}

	function goToPage(pageNumber: number) {
		currentPage = pageNumber;
	}

	function viewDocument(documentId: string) {
		goto(`/arrival_documents/${documentId}`);
	}

	function createDocument() {
		goto(`/arrival_documents/new?site_id=${siteId}`);
	}

	function getSortIcon(column: string) {
		if (sortBy !== column) return '';
		return sortOrder === 'asc' ? '↑' : '↓';
	}
</script>

<div class="container mx-auto px-4 py-8">
	{#if loading}
		<div class="flex justify-center items-center h-64">
			<span class="loading loading-spinner loading-lg"></span>
		</div>
	{:else if error}
		<div class="alert alert-error mb-6">
			<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
			</svg>
			<span>{error}</span>
		</div>
	{:else}
		<!-- Header -->
		<div class="mb-8">
			<div class="breadcrumbs text-sm mb-4">
				<ul>
					<li><a href="/">Sites</a></li>
					<li><a href="/sites/{siteId}">{site?.site_name || 'Site'}</a></li>
					<li>Deliveries</li>
				</ul>
			</div>
			<div class="flex justify-between items-center">
				<div>
					<h1 class="text-3xl font-bold text-gray-900 mb-2">Deliveries - {site?.site_name}</h1>
					<p class="text-gray-600">Manage arrival documents and deliveries for this site</p>
				</div>
				<button onclick={createDocument} class="btn btn-primary">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
					</svg>
					Create Delivery Document
				</button>
			</div>
		</div>

		{#if deliveries.length === 0}
			<div class="text-center py-12">
				<svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
				</svg>
				<h3 class="text-lg font-medium text-gray-900 mb-2">No deliveries found</h3>
				<p class="text-gray-500 mb-4">Get started by creating your first delivery document.</p>
				<button onclick={createDocument} class="btn btn-primary">
					Create Delivery Document
				</button>
			</div>
		{:else}
			<!-- Documents Table -->
			<div class="card bg-base-100 shadow-lg">
				<div class="card-body">
					<div class="overflow-x-auto">
						<table class="table table-zebra">
							<thead>
								<tr>
									<th>
										<button onclick={() => handleSort('arrival_doc_name')} class="flex items-center hover:text-primary">
											Name {getSortIcon('arrival_doc_name')}
										</button>
									</th>
									<th>
										<button onclick={() => handleSort('delivery_date')} class="flex items-center hover:text-primary">
											Delivery Date {getSortIcon('delivery_date')}
										</button>
									</th>
									<th>Description</th>
									<th>
										<button onclick={() => handleSort('is_valid')} class="flex items-center hover:text-primary">
											Status {getSortIcon('is_valid')}
										</button>
									</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody>
								{#each deliveries as document}
									<tr>
										<td class="font-medium">{document.arrival_doc_name}</td>
										<td>{document.delivery_date ? new Date(document.delivery_date).toLocaleDateString() : 'No date'}</td>
										<td class="text-sm text-gray-600 max-w-xs truncate">
											{document.arrival_doc_description || 'No description'}
										</td>
										<td>
											{#if document.computed_is_valid}
												<div class="badge badge-success">Valid</div>
											{:else}
												<div class="badge badge-error">Invalid</div>
											{/if}
										</td>
										<td>
											<button 
												onclick={() => viewDocument(document.arrival_doc_id)}
												class="btn btn-sm btn-outline"
											>
												View
											</button>
										</td>
									</tr>
								{/each}
							</tbody>
						</table>
					</div>

					<!-- Pagination -->
					{#if totalPages > 1}
						<div class="flex justify-center mt-6">
							<div class="join">
								{#each Array(totalPages) as _, i}
									<button 
										class="join-item btn {currentPage === i + 1 ? 'btn-active' : ''}"
										onclick={() => goToPage(i + 1)}
									>
										{i + 1}
									</button>
								{/each}
							</div>
						</div>
					{/if}
				</div>
			</div>
		{/if}
	{/if}
</div>

================
File: src/routes/sites/[id]/logistics/delivery-removal/+page.svelte
================
<script lang="ts">
	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import sitesService from '$lib/services/sites';

	let siteId: string;
	let siteName = 'Loading...';

	onMount(async () => {
		siteId = $page.params.id;
		try {
			const site = await sitesService.getSiteById(siteId);
			siteName = site?.site_name || `Site ${siteId.slice(0, 8)}...`;
		} catch (error) {
			console.error('Error fetching site:', error);
			siteName = `Site ${siteId.slice(0, 8)}...`;
		}
	});
</script>

<svelte:head>
	<title>Delivery & Removal - {siteName} - WasteX™</title>
</svelte:head>

<div class="container mx-auto px-4 py-8">
	<div class="mb-8">
		<nav class="text-sm breadcrumbs">
			<ul>
				<li><a href="/" class="text-blue-600 hover:text-blue-800">Sites</a></li>
				<li><a href="/sites/{siteId}" class="text-blue-600 hover:text-blue-800">{siteName}</a></li>
				<li><a href="/sites/{siteId}/logistics" class="text-blue-600 hover:text-blue-800">Logistics</a></li>
				<li class="text-gray-500">Delivery & Removal</li>
			</ul>
		</nav>
		
		<div class="flex justify-between items-center">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">Delivery & Removal</h1>
				<p class="text-gray-600 mt-2">Logistics operations for {siteName}</p>
			</div>
		</div>
	</div>

	<!-- Placeholder Content -->
	<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
		<div class="text-center">
			<div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-blue-100 mb-4">
				<svg class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
				</svg>
			</div>
			<h3 class="text-lg font-medium text-gray-900 mb-2">Delivery & Removal Operations</h3>
			<p class="text-gray-500 mb-6">This page will show detailed delivery and removal logistics data for this site.</p>
			
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
				<div class="bg-gray-50 rounded-lg p-6">
					<h4 class="font-semibold text-gray-900 mb-2">Delivery Tracking</h4>
					<p class="text-gray-600 text-sm">Monitor incoming deliveries and their status</p>
				</div>
				<div class="bg-gray-50 rounded-lg p-6">
					<h4 class="font-semibold text-gray-900 mb-2">Removal Scheduling</h4>
					<p class="text-gray-600 text-sm">Schedule and track waste removal operations</p>
				</div>
				<div class="bg-gray-50 rounded-lg p-6">
					<h4 class="font-semibold text-gray-900 mb-2">Route Optimization</h4>
					<p class="text-gray-600 text-sm">Optimize delivery and pickup routes</p>
				</div>
			</div>
		</div>
	</div>
</div>

================
File: src/routes/sites/[id]/logistics/water-energy/+page.svelte
================
<script lang="ts">
	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import sitesService from '$lib/services/sites';

	let siteId: string;
	let siteName = 'Loading...';

	onMount(async () => {
		siteId = $page.params.id;
		try {
			const site = await sitesService.getSiteById(siteId);
			siteName = site?.site_name || `Site ${siteId.slice(0, 8)}...`;
		} catch (error) {
			console.error('Error fetching site:', error);
			siteName = `Site ${siteId.slice(0, 8)}...`;
		}
	});
</script>

<svelte:head>
	<title>Water & Energy - {siteName} - WasteX™</title>
</svelte:head>

<div class="container mx-auto px-4 py-8">
	<div class="mb-8">
		<nav class="text-sm breadcrumbs">
			<ul>
				<li><a href="/" class="text-blue-600 hover:text-blue-800">Sites</a></li>
				<li><a href="/sites/{siteId}" class="text-blue-600 hover:text-blue-800">{siteName}</a></li>
				<li><a href="/sites/{siteId}/logistics" class="text-blue-600 hover:text-blue-800">Logistics</a></li>
				<li class="text-gray-500">Water & Energy</li>
			</ul>
		</nav>
		
		<div class="flex justify-between items-center">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">Water & Energy Management</h1>
				<p class="text-gray-600 mt-2">Resource consumption tracking for {siteName}</p>
			</div>
		</div>
	</div>

	<!-- Placeholder Content -->
	<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
		<div class="text-center">
			<div class="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-cyan-100 mb-4">
				<svg class="h-8 w-8 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
				</svg>
			</div>
			<h3 class="text-lg font-medium text-gray-900 mb-2">Water & Energy Consumption</h3>
			<p class="text-gray-500 mb-6">Monitor and analyze water and energy usage patterns at this site.</p>
			
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
				<div class="bg-gray-50 rounded-lg p-6">
					<h4 class="font-semibold text-gray-900 mb-2">Water Usage</h4>
					<p class="text-gray-600 text-sm">Track water consumption and identify optimization opportunities</p>
				</div>
				<div class="bg-gray-50 rounded-lg p-6">
					<h4 class="font-semibold text-gray-900 mb-2">Energy Consumption</h4>
					<p class="text-gray-600 text-sm">Monitor electricity and fuel usage across operations</p>
				</div>
				<div class="bg-gray-50 rounded-lg p-6">
					<h4 class="font-semibold text-gray-900 mb-2">Efficiency Metrics</h4>
					<p class="text-gray-600 text-sm">Analyze resource efficiency and sustainability metrics</p>
				</div>
			</div>
		</div>
	</div>
</div>

================
File: src/routes/sites/[id]/logistics/+page.svelte
================
<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import sitesService, { type Site } from '$lib/services/sites';

	let site = $state<Site | null>(null);
	let loading = $state(true);
	let error = $state<string | null>(null);

	let siteId = $derived($page.params.id);

	async function loadSiteData() {
		if (!siteId) return;
		
		loading = true;
		error = null;
		
		try {
			site = await sitesService.getSiteById(siteId);
		} catch (err) {
			console.error('Error loading site data:', err);
			error = 'Failed to load site data. Please try again later.';
		} finally {
			loading = false;
		}
	}

	onMount(() => {
		loadSiteData();
	});

	$effect(() => {
		if (siteId) {
			loadSiteData();
		}
	});
</script>

<div class="container mx-auto px-4 py-8">
	{#if loading}
		<div class="flex justify-center items-center h-64">
			<span class="loading loading-spinner loading-lg"></span>
		</div>
	{:else if error}
		<div class="alert alert-error mb-6">
			<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
			</svg>
			<span>{error}</span>
		</div>
	{:else}
		<!-- Header -->
		<div class="mb-8">
			<div class="breadcrumbs text-sm mb-4">
				<ul>
					<li><a href="/">Sites</a></li>
					<li><a href="/sites/{siteId}">{site?.site_name || 'Site'}</a></li>
					<li>Logistics</li>
				</ul>
			</div>
			<div class="flex justify-between items-center">
				<div>
					<h1 class="text-3xl font-bold text-gray-900 mb-2">Logistics - {site?.site_name}</h1>
					<p class="text-gray-600">Manage transportation, emissions, and logistics operations for this site</p>
				</div>
				<button class="btn btn-primary" disabled>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
					</svg>
					Create Logistics Entry
				</button>
			</div>
		</div>

		<!-- Coming Soon Card -->
		<div class="card bg-base-100 shadow-lg">
			<div class="card-body text-center py-16">
				<svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-16 w-16 text-gray-400 mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
				</svg>
				<h2 class="text-2xl font-bold text-gray-900 mb-4">Logistics Management</h2>
				<p class="text-gray-600 mb-6 max-w-md mx-auto">
					This section will help you track transportation, calculate emissions, and optimize logistics operations for material deliveries and removals.
				</p>
				<div class="text-sm text-gray-500">
					<p>Coming soon...</p>
				</div>
			</div>
		</div>

		<!-- Feature Preview -->
		<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
			<div class="card bg-base-100 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Transportation Tracking</h3>
					<p class="text-sm text-gray-600">Monitor delivery routes, distances, and transport modes</p>
				</div>
			</div>
			<div class="card bg-base-100 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Emissions Calculation</h3>
					<p class="text-sm text-gray-600">Calculate and track carbon emissions from logistics activities</p>
				</div>
			</div>
			<div class="card bg-base-100 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Route Optimization</h3>
					<p class="text-sm text-gray-600">Optimize delivery routes to reduce costs and environmental impact</p>
				</div>
			</div>
		</div>
	{/if}
</div>

================
File: src/routes/sites/[id]/machine-operation/+page.svelte
================
<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import sitesService, { type Site } from '$lib/services/sites';

	let site = $state<Site | null>(null);
	let loading = $state(true);
	let error = $state<string | null>(null);

	let siteId = $derived($page.params.id);

	async function loadSiteData() {
		if (!siteId) return;
		
		loading = true;
		error = null;
		
		try {
			site = await sitesService.getSiteById(siteId);
		} catch (err) {
			console.error('Error loading site data:', err);
			error = 'Failed to load site data. Please try again later.';
		} finally {
			loading = false;
		}
	}

	onMount(() => {
		loadSiteData();
	});

	$effect(() => {
		if (siteId) {
			loadSiteData();
		}
	});
</script>

<div class="container mx-auto px-4 py-8">
	{#if loading}
		<div class="flex justify-center items-center h-64">
			<span class="loading loading-spinner loading-lg"></span>
		</div>
	{:else if error}
		<div class="alert alert-error mb-6">
			<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
			</svg>
			<span>{error}</span>
		</div>
	{:else}
		<!-- Header -->
		<div class="mb-8">
			<div class="breadcrumbs text-sm mb-4">
				<ul>
					<li><a href="/">Sites</a></li>
					<li><a href="/sites/{siteId}">{site?.site_name || 'Site'}</a></li>
					<li>Machine Operations</li>
				</ul>
			</div>
			<div class="flex justify-between items-center">
				<div>
					<h1 class="text-3xl font-bold text-gray-900 mb-2">Machine Operations - {site?.site_name}</h1>
					<p class="text-gray-600">Monitor and manage construction equipment and machinery usage</p>
				</div>
				<button class="btn btn-primary" disabled>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
					</svg>
					Log Machine Usage
				</button>
			</div>
		</div>

		<!-- Coming Soon Card -->
		<div class="card bg-base-100 shadow-lg">
			<div class="card-body text-center py-16">
				<svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-16 w-16 text-gray-400 mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
				</svg>
				<h2 class="text-2xl font-bold text-gray-900 mb-4">Machine Operations</h2>
				<p class="text-gray-600 mb-6 max-w-md mx-auto">
					This section will help you track machinery usage, maintenance schedules, fuel consumption, and operational efficiency for construction equipment.
				</p>
				<div class="text-sm text-gray-500">
					<p>Coming soon...</p>
				</div>
			</div>
		</div>

		<!-- Feature Preview -->
		<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">
			<div class="card bg-base-100 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Usage Tracking</h3>
					<p class="text-sm text-gray-600">Monitor machine hours, fuel consumption, and operational costs</p>
				</div>
			</div>
			<div class="card bg-base-100 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Maintenance Scheduling</h3>
					<p class="text-sm text-gray-600">Track maintenance schedules and equipment condition</p>
				</div>
			</div>
			<div class="card bg-base-100 shadow">
				<div class="card-body">
					<h3 class="card-title text-lg">Efficiency Analysis</h3>
					<p class="text-sm text-gray-600">Analyze performance metrics and optimize equipment usage</p>
				</div>
			</div>
		</div>
	{/if}
</div>

================
File: src/routes/sites/[id]/removals/[removalId]/edit/+page.svelte
================
<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import { goto } from '$app/navigation';
	import sitesService, { type Site } from '$lib/services/sites';
	import removalsService, { type Removal, type RemovalUpdate, type DisposalMethod, type DisposalFacility, type Submaterial } from '$lib/services/removals';

	let site = $state<Site | null>(null);
	let removal = $state<Removal | null>(null);
	let disposalMethods = $state<DisposalMethod[]>([]);
	let disposalFacilities = $state<DisposalFacility[]>([]);
	let submaterials = $state<Submaterial[]>([]);
	let loading = $state(true);
	let saving = $state(false);
	let error = $state<string | null>(null);
	let validationErrors = $state<Record<string, string>>({});

	// Form data
	let formData = $state<RemovalUpdate>({
		submaterial_id: '',
		waste_weight_kg: undefined,
		waste_volume_m3: undefined,
		removal_distance_km: undefined,
		removal_date: '',
		disposal_method_id: '',
		disposal_facility_id: '',
		removal_cost: undefined,
		removal_notes: '',
		removal_partner_id: '',
		appx_resource_value: undefined,
		id_po: ''
	});

	let siteId = $derived($page.params.id);
	let removalId = $derived($page.params.removalId);

	async function loadData() {
		if (!siteId || !removalId) return;
		
		loading = true;
		error = null;
		
		try {
			const [siteData, removalData, disposalMethodsData, disposalFacilitiesData, submaterialsData] = await Promise.all([
				sitesService.getSiteById(siteId),
				removalsService.getRemovalById(removalId),
				removalsService.getDisposalMethods(),
				removalsService.getDisposalFacilities(),
				removalsService.getSubmaterials()
			]);

			site = siteData;
			removal = removalData;
			disposalMethods = disposalMethodsData;
			disposalFacilities = disposalFacilitiesData;
			submaterials = submaterialsData;

			// Populate form with existing data
			formData = {
				submaterial_id: removal.submaterial_id || '',
				waste_weight_kg: removal.waste_weight_kg,
				waste_volume_m3: removal.waste_volume_m3,
				removal_distance_km: removal.removal_distance_km,
				removal_date: removal.removal_date || '',
				disposal_method_id: removal.disposal_method_id || '',
				disposal_facility_id: removal.disposal_facility_id || '',
				removal_cost: removal.removal_cost,
				removal_notes: removal.removal_notes || '',
				removal_partner_id: removal.removal_partner_id || '',
				appx_resource_value: removal.appx_resource_value,
				id_po: removal.id_po || ''
			};
		} catch (err) {
			console.error('Error loading data:', err);
			error = 'Failed to load removal data. Please try again later.';
		} finally {
			loading = false;
		}
	}

	function validateForm(): boolean {
		validationErrors = {};

		if (!formData.submaterial_id) {
			validationErrors.submaterial_id = 'Material type is required';
		}

		if (!formData.removal_date) {
			validationErrors.removal_date = 'Removal date is required';
		}

		if (formData.waste_weight_kg !== undefined && formData.waste_weight_kg < 0) {
			validationErrors.waste_weight_kg = 'Weight must be positive';
		}

		if (formData.waste_volume_m3 !== undefined && formData.waste_volume_m3 < 0) {
			validationErrors.waste_volume_m3 = 'Volume must be positive';
		}

		if (formData.removal_distance_km !== undefined && formData.removal_distance_km < 0) {
			validationErrors.removal_distance_km = 'Distance must be positive';
		}

		if (formData.removal_cost !== undefined && formData.removal_cost < 0) {
			validationErrors.removal_cost = 'Cost must be positive';
		}

		if (formData.appx_resource_value !== undefined && formData.appx_resource_value < 0) {
			validationErrors.appx_resource_value = 'Resource value must be positive';
		}

		return Object.keys(validationErrors).length === 0;
	}

	async function handleSubmit() {
		if (!validateForm() || !removalId) return;

		saving = true;
		error = null;

		try {
			await removalsService.updateRemoval(removalId, formData);
			goto(`/sites/${siteId}/removals/${removalId}`);
		} catch (err) {
			console.error('Error updating removal:', err);
			error = 'Failed to update removal record. Please try again.';
		} finally {
			saving = false;
		}
	}

	function handleCancel() {
		goto(`/sites/${siteId}/removals/${removalId}`);
	}

	onMount(() => {
		loadData();
	});

	$effect(() => {
		if (siteId && removalId) {
			loadData();
		}
	});
</script>

<div class="container mx-auto px-4 py-8">
	{#if loading}
		<div class="flex justify-center items-center h-64">
			<span class="loading loading-spinner loading-lg"></span>
		</div>
	{:else if error}
		<div class="alert alert-error mb-6">
			<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
			</svg>
			<span>{error}</span>
		</div>
	{:else}
		<!-- Header -->
		<div class="mb-8">
			<div class="breadcrumbs text-sm mb-4">
				<ul>
					<li><a href="/">Sites</a></li>
					<li><a href="/sites/{siteId}">{site?.site_name || 'Site'}</a></li>
					<li><a href="/sites/{siteId}/removals">Removals</a></li>
					<li><a href="/sites/{siteId}/removals/{removalId}">Removal Details</a></li>
					<li>Edit</li>
				</ul>
			</div>
			<div class="flex justify-between items-center">
				<div>
					<h1 class="text-3xl font-bold text-gray-900 mb-2">Edit Removal Record</h1>
					<p class="text-gray-600">Update removal details for {site?.site_name}</p>
				</div>
			</div>
		</div>

		<!-- Form -->
		<form on:submit|preventDefault={handleSubmit}>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Basic Information -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-6">Basic Information</h2>
						<div class="space-y-4">
							<!-- Material Type -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Material Type *</span>
								</label>
								<select 
									class="select select-bordered" 
									class:select-error={validationErrors.submaterial_id}
									bind:value={formData.submaterial_id}
								>
									<option value="">Select material type</option>
									{#each submaterials as submaterial}
										<option value={submaterial.submaterial_id}>{submaterial.submaterial_name}</option>
									{/each}
								</select>
								{#if validationErrors.submaterial_id}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.submaterial_id}</span>
									</label>
								{/if}
							</div>

							<!-- Removal Date -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Removal Date *</span>
								</label>
								<input 
									type="date" 
									class="input input-bordered" 
									class:input-error={validationErrors.removal_date}
									bind:value={formData.removal_date}
								/>
								{#if validationErrors.removal_date}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.removal_date}</span>
									</label>
								{/if}
							</div>

							<!-- Disposal Method -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Disposal Method</span>
								</label>
								<select 
									class="select select-bordered" 
									bind:value={formData.disposal_method_id}
								>
									<option value="">Select disposal method</option>
									{#each disposalMethods as method}
										<option value={method.disposal_method_id}>{method.disposal_method_name}</option>
									{/each}
								</select>
							</div>

							<!-- Disposal Facility -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Disposal Facility</span>
								</label>
								<select 
									class="select select-bordered" 
									bind:value={formData.disposal_facility_id}
								>
									<option value="">Select disposal facility</option>
									{#each disposalFacilities as facility}
										<option value={facility.disposal_facility_id}>{facility.disposal_facility_name}</option>
									{/each}
								</select>
							</div>
						</div>
					</div>
				</div>

				<!-- Quantities and Measurements -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-6">Quantities & Measurements</h2>
						<div class="space-y-4">
							<!-- Waste Weight -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Waste Weight (kg)</span>
								</label>
								<input 
									type="number" 
									step="0.01"
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.waste_weight_kg}
									bind:value={formData.waste_weight_kg}
									placeholder="Enter weight in kg"
								/>
								{#if validationErrors.waste_weight_kg}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.waste_weight_kg}</span>
									</label>
								{/if}
							</div>

							<!-- Waste Volume -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Waste Volume (m³)</span>
								</label>
								<input 
									type="number" 
									step="0.01"
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.waste_volume_m3}
									bind:value={formData.waste_volume_m3}
									placeholder="Enter volume in m³"
								/>
								{#if validationErrors.waste_volume_m3}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.waste_volume_m3}</span>
									</label>
								{/if}
							</div>

							<!-- Removal Distance -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Removal Distance (km)</span>
								</label>
								<input 
									type="number" 
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.removal_distance_km}
									bind:value={formData.removal_distance_km}
									placeholder="Enter distance in km"
								/>
								{#if validationErrors.removal_distance_km}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.removal_distance_km}</span>
									</label>
								{/if}
							</div>
						</div>
					</div>
				</div>

				<!-- Financial Information -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-6">Financial Information</h2>
						<div class="space-y-4">
							<!-- Removal Cost -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Removal Cost ($)</span>
								</label>
								<input 
									type="number" 
									step="0.01"
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.removal_cost}
									bind:value={formData.removal_cost}
									placeholder="Enter cost in USD"
								/>
								{#if validationErrors.removal_cost}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.removal_cost}</span>
									</label>
								{/if}
							</div>

							<!-- Approximate Resource Value -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Approximate Resource Value ($)</span>
								</label>
								<input 
									type="number" 
									step="0.01"
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.appx_resource_value}
									bind:value={formData.appx_resource_value}
									placeholder="Enter resource value in USD"
								/>
								{#if validationErrors.appx_resource_value}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.appx_resource_value}</span>
									</label>
								{/if}
							</div>

							<!-- Purchase Order ID -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Purchase Order ID</span>
								</label>
								<input 
									type="text" 
									class="input input-bordered" 
									bind:value={formData.id_po}
									placeholder="Enter PO ID"
								/>
							</div>
						</div>
					</div>
				</div>

				<!-- Additional Information -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-6">Additional Information</h2>
						<div class="space-y-4">
							<!-- Removal Partner ID -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Removal Partner ID</span>
								</label>
								<input 
									type="text" 
									class="input input-bordered" 
									bind:value={formData.removal_partner_id}
									placeholder="Enter partner ID"
								/>
							</div>

							<!-- Notes -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Notes</span>
								</label>
								<textarea 
									class="textarea textarea-bordered h-32" 
									bind:value={formData.removal_notes}
									placeholder="Enter any additional notes about this removal..."
								></textarea>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Form Actions -->
			<div class="flex justify-end gap-4 mt-8">
				<button 
					type="button" 
					class="btn btn-outline" 
					on:click={handleCancel}
					disabled={saving}
				>
					Cancel
				</button>
				<button 
					type="submit" 
					class="btn btn-primary" 
					disabled={saving}
				>
					{#if saving}
						<span class="loading loading-spinner loading-sm mr-2"></span>
						Saving...
					{:else}
						Save Changes
					{/if}
				</button>
			</div>
		</form>
	{/if}
</div>

================
File: src/routes/sites/[id]/removals/[removalId]/+page.svelte
================
<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import { goto } from '$app/navigation';
	import sitesService, { type Site } from '$lib/services/sites';
	import removalsService, { type Removal } from '$lib/services/removals';

	let site = $state<Site | null>(null);
	let removal = $state<Removal | null>(null);
	let loading = $state(true);
	let error = $state<string | null>(null);

	let siteId = $derived($page.params.id);
	let removalId = $derived($page.params.removalId);

	async function loadData() {
		if (!siteId || !removalId) return;
		
		loading = true;
		error = null;
		
		try {
			const [siteData, removalData] = await Promise.all([
				sitesService.getSiteById(siteId),
				removalsService.getRemovalById(removalId)
			]);

			site = siteData;
			removal = removalData;
		} catch (err) {
			console.error('Error loading data:', err);
			error = 'Failed to load removal data. Please try again later.';
		} finally {
			loading = false;
		}
	}

	function editRemoval() {
		goto(`/sites/${siteId}/removals/${removalId}/edit`);
	}

	function backToRemovals() {
		goto(`/sites/${siteId}/removals`);
	}

	async function deleteRemoval() {
		if (!removalId || !confirm('Are you sure you want to delete this removal record? This action cannot be undone.')) {
			return;
		}

		try {
			await removalsService.deleteRemoval(removalId);
			goto(`/sites/${siteId}/removals`);
		} catch (err) {
			console.error('Error deleting removal:', err);
			alert('Failed to delete removal record. Please try again.');
		}
	}

	function formatCurrency(amount?: number): string {
		if (amount === null || amount === undefined) return 'N/A';
		return new Intl.NumberFormat('en-US', {
			style: 'currency',
			currency: 'USD'
		}).format(amount);
	}

	function formatWeight(weight?: number): string {
		if (weight === null || weight === undefined) return 'N/A';
		return `${weight.toLocaleString()} kg`;
	}

	function formatVolume(volume?: number): string {
		if (volume === null || volume === undefined) return 'N/A';
		return `${volume.toLocaleString()} m³`;
	}

	function formatDistance(distance?: number): string {
		if (distance === null || distance === undefined) return 'N/A';
		return `${distance.toLocaleString()} km`;
	}

	onMount(() => {
		loadData();
	});

	$effect(() => {
		if (siteId && removalId) {
			loadData();
		}
	});
</script>

<div class="container mx-auto px-4 py-8">
	{#if loading}
		<div class="flex justify-center items-center h-64">
			<span class="loading loading-spinner loading-lg"></span>
		</div>
	{:else if error}
		<div class="alert alert-error mb-6">
			<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
			</svg>
			<span>{error}</span>
		</div>
		<button class="btn btn-outline" on:click={backToRemovals}>
			← Back to Removals
		</button>
	{:else if removal}
		<!-- Header -->
		<div class="mb-8">
			<div class="breadcrumbs text-sm mb-4">
				<ul>
					<li><a href="/">Sites</a></li>
					<li><a href="/sites/{siteId}">{site?.site_name || 'Site'}</a></li>
					<li><a href="/sites/{siteId}/removals">Removals</a></li>
					<li>Removal Details</li>
				</ul>
			</div>
			<div class="flex justify-between items-start">
				<div>
					<h1 class="text-3xl font-bold text-gray-900 mb-2">Removal Record</h1>
					<p class="text-gray-600">Viewing removal details for {site?.site_name}</p>
				</div>
				<div class="flex gap-2">
					<button class="btn btn-outline" on:click={backToRemovals}>
						← Back to Removals
					</button>
					<button class="btn btn-primary" on:click={editRemoval}>
						<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
						</svg>
						Edit
					</button>
					<button class="btn btn-error btn-outline" on:click={deleteRemoval}>
						<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
						</svg>
						Delete
					</button>
				</div>
			</div>
		</div>

		<!-- Main Content -->
		<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
			<!-- Basic Information -->
			<div class="card bg-base-100 shadow-lg">
				<div class="card-body">
					<h2 class="card-title text-xl mb-6">Basic Information</h2>
					<div class="space-y-4">
						<div>
							<label class="text-sm font-medium text-gray-500">Removal Date</label>
							<p class="text-lg font-medium">
								{removal.removal_date ? new Date(removal.removal_date).toLocaleDateString() : 'Not specified'}
							</p>
						</div>
						<div>
							<label class="text-sm font-medium text-gray-500">Material Type</label>
							<p class="text-lg font-medium">{removal.submaterial_name || 'Unknown'}</p>
						</div>
						<div>
							<label class="text-sm font-medium text-gray-500">Disposal Method</label>
							<p class="text-lg font-medium">{removal.disposal_method_name || 'Not specified'}</p>
						</div>
						<div>
							<label class="text-sm font-medium text-gray-500">Disposal Facility</label>
							<p class="text-lg font-medium">{removal.disposal_facility_name || 'Not specified'}</p>
						</div>
					</div>
				</div>
			</div>

			<!-- Quantities and Measurements -->
			<div class="card bg-base-100 shadow-lg">
				<div class="card-body">
					<h2 class="card-title text-xl mb-6">Quantities & Measurements</h2>
					<div class="space-y-4">
						<div>
							<label class="text-sm font-medium text-gray-500">Waste Weight</label>
							<p class="text-lg font-medium">{formatWeight(removal.waste_weight_kg)}</p>
						</div>
						<div>
							<label class="text-sm font-medium text-gray-500">Waste Volume</label>
							<p class="text-lg font-medium">{formatVolume(removal.waste_volume_m3)}</p>
						</div>
						<div>
							<label class="text-sm font-medium text-gray-500">Removal Distance</label>
							<p class="text-lg font-medium">{formatDistance(removal.removal_distance_km)}</p>
						</div>
					</div>
				</div>
			</div>

			<!-- Financial Information -->
			<div class="card bg-base-100 shadow-lg">
				<div class="card-body">
					<h2 class="card-title text-xl mb-6">Financial Information</h2>
					<div class="space-y-4">
						<div>
							<label class="text-sm font-medium text-gray-500">Removal Cost</label>
							<p class="text-lg font-medium">{formatCurrency(removal.removal_cost)}</p>
						</div>
						<div>
							<label class="text-sm font-medium text-gray-500">Approximate Resource Value</label>
							<p class="text-lg font-medium">{formatCurrency(removal.appx_resource_value)}</p>
						</div>
						<div>
							<label class="text-sm font-medium text-gray-500">Purchase Order ID</label>
							<p class="text-lg font-medium">{removal.id_po || 'Not specified'}</p>
						</div>
					</div>
				</div>
			</div>

			<!-- Additional Information -->
			<div class="card bg-base-100 shadow-lg">
				<div class="card-body">
					<h2 class="card-title text-xl mb-6">Additional Information</h2>
					<div class="space-y-4">
						<div>
							<label class="text-sm font-medium text-gray-500">Removal Partner ID</label>
							<p class="text-lg font-medium">{removal.removal_partner_id || 'Not specified'}</p>
						</div>
						<div>
							<label class="text-sm font-medium text-gray-500">Notes</label>
							<div class="bg-gray-50 p-4 rounded-lg">
								<p class="text-sm whitespace-pre-wrap">
									{removal.removal_notes || 'No notes provided'}
								</p>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Summary Statistics -->
		<div class="mt-8">
			<div class="card bg-base-100 shadow-lg">
				<div class="card-body">
					<h2 class="card-title text-xl mb-6">Summary</h2>
					<div class="grid grid-cols-1 md:grid-cols-4 gap-6">
						<div class="stat">
							<div class="stat-title">Total Weight</div>
							<div class="stat-value text-2xl">{formatWeight(removal.waste_weight_kg)}</div>
						</div>
						<div class="stat">
							<div class="stat-title">Total Volume</div>
							<div class="stat-value text-2xl">{formatVolume(removal.waste_volume_m3)}</div>
						</div>
						<div class="stat">
							<div class="stat-title">Total Cost</div>
							<div class="stat-value text-2xl">{formatCurrency(removal.removal_cost)}</div>
						</div>
						<div class="stat">
							<div class="stat-title">Resource Value</div>
							<div class="stat-value text-2xl">{formatCurrency(removal.appx_resource_value)}</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	{/if}
</div>

================
File: src/routes/sites/[id]/removals/new/+page.svelte
================
<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import { goto } from '$app/navigation';
	import sitesService, { type Site } from '$lib/services/sites';
	import removalsService, { type RemovalCreate, type DisposalMethod, type DisposalFacility, type Submaterial } from '$lib/services/removals';

	let site = $state<Site | null>(null);
	let disposalMethods = $state<DisposalMethod[]>([]);
	let disposalFacilities = $state<DisposalFacility[]>([]);
	let submaterials = $state<Submaterial[]>([]);
	let loading = $state(true);
	let saving = $state(false);
	let error = $state<string | null>(null);
	let validationErrors = $state<Record<string, string>>({});

	// Form data
	let formData = $state<RemovalCreate>({
		site_id: '',
		submaterial_id: '',
		waste_weight_kg: undefined,
		waste_volume_m3: undefined,
		removal_distance_km: undefined,
		removal_date: '',
		disposal_method_id: '',
		disposal_facility_id: '',
		removal_cost: undefined,
		removal_notes: '',
		removal_partner_id: '',
		appx_resource_value: undefined,
		id_po: ''
	});

	let siteId = $derived($page.params.id);

	async function loadData() {
		if (!siteId) return;
		
		loading = true;
		error = null;
		
		try {
			const [siteData, disposalMethodsData, disposalFacilitiesData, submaterialsData] = await Promise.all([
				sitesService.getSiteById(siteId),
				removalsService.getDisposalMethods(),
				removalsService.getDisposalFacilities(),
				removalsService.getSubmaterials()
			]);

			site = siteData;
			disposalMethods = disposalMethodsData;
			disposalFacilities = disposalFacilitiesData;
			submaterials = submaterialsData;

			// Set site_id in form data
			formData.site_id = siteId;
		} catch (err) {
			console.error('Error loading data:', err);
			error = 'Failed to load form data. Please try again later.';
		} finally {
			loading = false;
		}
	}

	function validateForm(): boolean {
		validationErrors = {};

		if (!formData.submaterial_id) {
			validationErrors.submaterial_id = 'Material type is required';
		}

		if (!formData.removal_date) {
			validationErrors.removal_date = 'Removal date is required';
		}

		if (formData.waste_weight_kg !== undefined && formData.waste_weight_kg < 0) {
			validationErrors.waste_weight_kg = 'Weight must be positive';
		}

		if (formData.waste_volume_m3 !== undefined && formData.waste_volume_m3 < 0) {
			validationErrors.waste_volume_m3 = 'Volume must be positive';
		}

		if (formData.removal_distance_km !== undefined && formData.removal_distance_km < 0) {
			validationErrors.removal_distance_km = 'Distance must be positive';
		}

		if (formData.removal_cost !== undefined && formData.removal_cost < 0) {
			validationErrors.removal_cost = 'Cost must be positive';
		}

		if (formData.appx_resource_value !== undefined && formData.appx_resource_value < 0) {
			validationErrors.appx_resource_value = 'Resource value must be positive';
		}

		return Object.keys(validationErrors).length === 0;
	}

	async function handleSubmit() {
		if (!validateForm()) return;

		saving = true;
		error = null;

		try {
			const newRemoval = await removalsService.createRemoval(formData);
			goto(`/sites/${siteId}/removals/${newRemoval.removal_id}`);
		} catch (err) {
			console.error('Error creating removal:', err);
			error = 'Failed to create removal record. Please try again.';
		} finally {
			saving = false;
		}
	}

	function handleCancel() {
		goto(`/sites/${siteId}/removals`);
	}

	onMount(() => {
		loadData();
	});

	$effect(() => {
		if (siteId) {
			loadData();
		}
	});
</script>

<div class="container mx-auto px-4 py-8">
	{#if loading}
		<div class="flex justify-center items-center h-64">
			<span class="loading loading-spinner loading-lg"></span>
		</div>
	{:else if error}
		<div class="alert alert-error mb-6">
			<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
			</svg>
			<span>{error}</span>
		</div>
	{:else}
		<!-- Header -->
		<div class="mb-8">
			<div class="breadcrumbs text-sm mb-4">
				<ul>
					<li><a href="/">Sites</a></li>
					<li><a href="/sites/{siteId}">{site?.site_name || 'Site'}</a></li>
					<li><a href="/sites/{siteId}/removals">Removals</a></li>
					<li>New Removal</li>
				</ul>
			</div>
			<div class="flex justify-between items-center">
				<div>
					<h1 class="text-3xl font-bold text-gray-900 mb-2">Create New Removal Record</h1>
					<p class="text-gray-600">Add a new waste removal record for {site?.site_name}</p>
				</div>
			</div>
		</div>

		<!-- Form -->
		<form on:submit|preventDefault={handleSubmit}>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Basic Information -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-6">Basic Information</h2>
						<div class="space-y-4">
							<!-- Material Type -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Material Type *</span>
								</label>
								<select 
									class="select select-bordered" 
									class:select-error={validationErrors.submaterial_id}
									bind:value={formData.submaterial_id}
								>
									<option value="">Select material type</option>
									{#each submaterials as submaterial}
										<option value={submaterial.submaterial_id}>{submaterial.submaterial_name}</option>
									{/each}
								</select>
								{#if validationErrors.submaterial_id}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.submaterial_id}</span>
									</label>
								{/if}
							</div>

							<!-- Removal Date -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Removal Date *</span>
								</label>
								<input 
									type="date" 
									class="input input-bordered" 
									class:input-error={validationErrors.removal_date}
									bind:value={formData.removal_date}
								/>
								{#if validationErrors.removal_date}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.removal_date}</span>
									</label>
								{/if}
							</div>

							<!-- Disposal Method -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Disposal Method</span>
								</label>
								<select 
									class="select select-bordered" 
									bind:value={formData.disposal_method_id}
								>
									<option value="">Select disposal method</option>
									{#each disposalMethods as method}
										<option value={method.disposal_method_id}>{method.disposal_method_name}</option>
									{/each}
								</select>
							</div>

							<!-- Disposal Facility -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Disposal Facility</span>
								</label>
								<select 
									class="select select-bordered" 
									bind:value={formData.disposal_facility_id}
								>
									<option value="">Select disposal facility</option>
									{#each disposalFacilities as facility}
										<option value={facility.disposal_facility_id}>{facility.disposal_facility_name}</option>
									{/each}
								</select>
							</div>
						</div>
					</div>
				</div>

				<!-- Quantities and Measurements -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-6">Quantities & Measurements</h2>
						<div class="space-y-4">
							<!-- Waste Weight -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Waste Weight (kg)</span>
								</label>
								<input 
									type="number" 
									step="0.01"
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.waste_weight_kg}
									bind:value={formData.waste_weight_kg}
									placeholder="Enter weight in kg"
								/>
								{#if validationErrors.waste_weight_kg}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.waste_weight_kg}</span>
									</label>
								{/if}
							</div>

							<!-- Waste Volume -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Waste Volume (m³)</span>
								</label>
								<input 
									type="number" 
									step="0.01"
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.waste_volume_m3}
									bind:value={formData.waste_volume_m3}
									placeholder="Enter volume in m³"
								/>
								{#if validationErrors.waste_volume_m3}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.waste_volume_m3}</span>
									</label>
								{/if}
							</div>

							<!-- Removal Distance -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Removal Distance (km)</span>
								</label>
								<input 
									type="number" 
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.removal_distance_km}
									bind:value={formData.removal_distance_km}
									placeholder="Enter distance in km"
								/>
								{#if validationErrors.removal_distance_km}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.removal_distance_km}</span>
									</label>
								{/if}
							</div>
						</div>
					</div>
				</div>

				<!-- Financial Information -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-6">Financial Information</h2>
						<div class="space-y-4">
							<!-- Removal Cost -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Removal Cost ($)</span>
								</label>
								<input 
									type="number" 
									step="0.01"
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.removal_cost}
									bind:value={formData.removal_cost}
									placeholder="Enter cost in USD"
								/>
								{#if validationErrors.removal_cost}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.removal_cost}</span>
									</label>
								{/if}
							</div>

							<!-- Approximate Resource Value -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Approximate Resource Value ($)</span>
								</label>
								<input 
									type="number" 
									step="0.01"
									min="0"
									class="input input-bordered" 
									class:input-error={validationErrors.appx_resource_value}
									bind:value={formData.appx_resource_value}
									placeholder="Enter resource value in USD"
								/>
								{#if validationErrors.appx_resource_value}
									<label class="label">
										<span class="label-text-alt text-error">{validationErrors.appx_resource_value}</span>
									</label>
								{/if}
							</div>

							<!-- Purchase Order ID -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Purchase Order ID</span>
								</label>
								<input 
									type="text" 
									class="input input-bordered" 
									bind:value={formData.id_po}
									placeholder="Enter PO ID"
								/>
							</div>
						</div>
					</div>
				</div>

				<!-- Additional Information -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<h2 class="card-title text-xl mb-6">Additional Information</h2>
						<div class="space-y-4">
							<!-- Removal Partner ID -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Removal Partner ID</span>
								</label>
								<input 
									type="text" 
									class="input input-bordered" 
									bind:value={formData.removal_partner_id}
									placeholder="Enter partner ID"
								/>
							</div>

							<!-- Notes -->
							<div class="form-control">
								<label class="label">
									<span class="label-text">Notes</span>
								</label>
								<textarea 
									class="textarea textarea-bordered h-32" 
									bind:value={formData.removal_notes}
									placeholder="Enter any additional notes about this removal..."
								></textarea>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- Form Actions -->
			<div class="flex justify-end gap-4 mt-8">
				<button 
					type="button" 
					class="btn btn-outline" 
					on:click={handleCancel}
					disabled={saving}
				>
					Cancel
				</button>
				<button 
					type="submit" 
					class="btn btn-primary" 
					disabled={saving}
				>
					{#if saving}
						<span class="loading loading-spinner loading-sm mr-2"></span>
						Creating...
					{:else}
						Create Removal
					{/if}
				</button>
			</div>
		</form>
	{/if}
</div>

================
File: src/routes/sites/[id]/removals/+page.svelte
================
<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import { goto } from '$app/navigation';
	import { 
		sitesService, 
		removalsService, 
		type Site, 
		type Removal, 
		type GetRemovalsParams, 
		type DisposalMethod, 
		type Submaterial 
	} from '$lib';

	let site = $state<Site | null>(null);
	let removals = $state<Removal[]>([]);
	let disposalMethods = $state<DisposalMethod[]>([]);
	let submaterials = $state<Submaterial[]>([]);
	let loading = $state(true);
	let error = $state<string | null>(null);

	// Pagination and filtering state
	let currentPage = $state(1);
	let totalPages = $state(1);
	let totalCount = $state(0);
	let pageSize = $state(20);

	// Filter state
	let dateFromFilter = $state('');
	let dateToFilter = $state('');
	let disposalMethodFilter = $state('');
	let submaterialFilter = $state('');
	let sortBy = $state('removal_date');
	let sortOrder = $state<'asc' | 'desc'>('desc');

	let siteId = $derived($page.params.id);

	async function loadData() {
		if (!siteId) return;
		
		loading = true;
		error = null;
		
		try {
			// Load site info and lookup data in parallel
			const [siteData, disposalMethodsData, submaterialsData] = await Promise.all([
				sitesService.getSiteById(siteId),
				removalsService.getDisposalMethods(),
				removalsService.getSubmaterials()
			]);

			site = siteData;
			disposalMethods = disposalMethodsData;
			submaterials = submaterialsData;

			// Load removals data
			await loadRemovals();
		} catch (err) {
			console.error('Error loading data:', err);
			error = 'Failed to load data. Please try again later.';
		} finally {
			loading = false;
		}
	}

	async function loadRemovals() {
		if (!siteId) return;

		try {
			const params: GetRemovalsParams = {
				siteId,
				page: currentPage,
				limit: pageSize,
				sortBy,
				sortOrder
			};

			// Add filters if they exist
			if (dateFromFilter) params.dateFrom = dateFromFilter;
			if (dateToFilter) params.dateTo = dateToFilter;
			if (disposalMethodFilter) params.disposalMethodId = disposalMethodFilter;
			if (submaterialFilter) params.submaterialId = submaterialFilter;

			const response = await removalsService.getRemovals(params);
			removals = response.data;
			totalPages = response.totalPages;
			totalCount = response.total;
		} catch (err) {
			console.error('Error loading removals:', err);
			error = 'Failed to load removals data.';
		}
	}

	function handleSort(column: string) {
		if (sortBy === column) {
			sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
		} else {
			sortBy = column;
			sortOrder = 'desc';
		}
		currentPage = 1;
		loadRemovals();
	}

	function handlePageChange(newPage: number) {
		currentPage = newPage;
		loadRemovals();
	}

	function clearFilters() {
		dateFromFilter = '';
		dateToFilter = '';
		disposalMethodFilter = '';
		submaterialFilter = '';
		currentPage = 1;
		loadRemovals();
	}

	function viewRemoval(removalId: string) {
		goto(`/sites/${siteId}/removals/${removalId}`);
	}

	function createRemoval() {
		goto(`/sites/${siteId}/removals/new`);
	}

	function formatCurrency(amount?: number): string {
		if (amount === null || amount === undefined) return 'N/A';
		return new Intl.NumberFormat('en-US', {
			style: 'currency',
			currency: 'USD'
		}).format(amount);
	}

	function formatWeight(weight?: number): string {
		if (weight === null || weight === undefined) return 'N/A';
		return `${weight.toLocaleString()} kg`;
	}

	function formatVolume(volume?: number): string {
		if (volume === null || volume === undefined) return 'N/A';
		return `${volume.toLocaleString()} m³`;
	}

	onMount(() => {
		loadData();
	});

	$effect(() => {
		if (siteId) {
			loadData();
		}
	});

	// Apply filters immediately when filter values change
	$effect(() => {
		if (siteId && (dateFromFilter || dateToFilter || disposalMethodFilter || submaterialFilter)) {
			currentPage = 1;
			loadRemovals();
		}
	});

	// Also trigger when clearing filters (when all filters are empty)
	$effect(() => {
		if (siteId && !dateFromFilter && !dateToFilter && !disposalMethodFilter && !submaterialFilter) {
			currentPage = 1;
			loadRemovals();
		}
	});
</script>

<div class="container mx-auto px-4 py-8">
	{#if loading}
		<div class="flex justify-center items-center h-64">
			<span class="loading loading-spinner loading-lg"></span>
		</div>
	{:else if error}
		<div class="alert alert-error mb-6">
			<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
			</svg>
			<span>{error}</span>
		</div>
	{:else}
		<!-- Header -->
		<div class="mb-8">
			<div class="breadcrumbs text-sm mb-4">
				<ul>
					<li><a href="/">Sites</a></li>
					<li><a href="/sites/{siteId}">{site?.site_name || 'Site'}</a></li>
					<li>Removals</li>
				</ul>
			</div>
			<div class="flex justify-between items-center">
				<div>
					<h1 class="text-3xl font-bold text-gray-900 mb-2">Removals - {site?.site_name}</h1>
					<p class="text-gray-600">Manage waste removals and disposal for this site</p>
				</div>
				<button class="btn btn-primary" onclick={createRemoval}>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
					</svg>
					Create Removal Record
				</button>
			</div>
		</div>

		<!-- Filters -->
		<div class="card bg-base-100 shadow-lg mb-6">
			<div class="card-body">
				<h3 class="card-title text-lg mb-4">Filters</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
					<!-- Date From -->
					<div class="form-control">
						<label class="label" for="date-from">
							<span class="label-text">Date From</span>
						</label>
						<input
							id="date-from"
							type="date"
							class="input input-bordered"
							bind:value={dateFromFilter}
						/>
					</div>

					<!-- Date To -->
					<div class="form-control">
						<label class="label" for="date-to">
							<span class="label-text">Date To</span>
						</label>
						<input
							id="date-to"
							type="date"
							class="input input-bordered"
							bind:value={dateToFilter}
						/>
					</div>

					<!-- Disposal Method -->
					<div class="form-control">
						<label class="label" for="disposal-method">
							<span class="label-text">Disposal Method</span>
						</label>
						<select id="disposal-method" class="select select-bordered" bind:value={disposalMethodFilter}>
							<option value="">All Methods</option>
							{#each disposalMethods as method}
								<option value={method.disposal_method_id}>{method.disposal_method_name}</option>
							{/each}
						</select>
					</div>

					<!-- Submaterial -->
					<div class="form-control">
						<label class="label" for="submaterial">
							<span class="label-text">Material Type</span>
						</label>
						<select id="submaterial" class="select select-bordered" bind:value={submaterialFilter}>
							<option value="">All Materials</option>
							{#each submaterials as submaterial}
								<option value={submaterial.submaterial_id}>{submaterial.submaterial_name}</option>
							{/each}
						</select>
					</div>
				</div>

				<!-- Filter Actions -->
				<div class="flex gap-2 mt-4">
					<button class="btn btn-outline" onclick={clearFilters}>
						Clear Filters
					</button>
				</div>
			</div>
		</div>

		<!-- Results Summary -->
		<div class="mb-4">
			<p class="text-sm text-gray-600">
				Showing {removals.length} of {totalCount} removal records
			</p>
		</div>

		<!-- Data Table -->
		<div class="card bg-base-100 shadow-lg">
			<div class="card-body p-0">
				{#if removals.length > 0}
					<div class="overflow-x-auto">
						<table class="table table-zebra">
							<thead>
								<tr>
									<th>
										<button class="btn btn-ghost btn-sm" onclick={() => handleSort('removal_date')}>
											Removal Date
											{#if sortBy === 'removal_date'}
												<span class="ml-1">{sortOrder === 'asc' ? '↑' : '↓'}</span>
											{/if}
										</button>
									</th>
									<th>
										Material Type
									</th>
									<th>
										<button class="btn btn-ghost btn-sm" onclick={() => handleSort('waste_weight_kg')}>
											Weight
											{#if sortBy === 'waste_weight_kg'}
												<span class="ml-1">{sortOrder === 'asc' ? '↑' : '↓'}</span>
											{/if}
										</button>
									</th>
									<th>
										<button class="btn btn-ghost btn-sm" onclick={() => handleSort('waste_volume_m3')}>
											Volume
											{#if sortBy === 'waste_volume_m3'}
												<span class="ml-1">{sortOrder === 'asc' ? '↑' : '↓'}</span>
											{/if}
										</button>
									</th>
									<th>Disposal Method</th>
									<th>
										<button class="btn btn-ghost btn-sm" onclick={() => handleSort('removal_cost')}>
											Cost
											{#if sortBy === 'removal_cost'}
												<span class="ml-1">{sortOrder === 'asc' ? '↑' : '↓'}</span>
											{/if}
										</button>
									</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody>
								{#each removals as removal}
									<tr>
										<td>
											{removal.removal_date ? new Date(removal.removal_date).toLocaleDateString() : 'N/A'}
										</td>
										<td class="font-medium">
											{removal.submaterial_name || 'Unknown'}
										</td>
										<td>
											{formatWeight(removal.waste_weight_kg)}
										</td>
										<td>
											{formatVolume(removal.waste_volume_m3)}
										</td>
										<td>
											{removal.disposal_method_name || 'Not specified'}
										</td>
										<td>
											{formatCurrency(removal.removal_cost)}
										</td>
										<td>
											<div class="flex gap-2">
												<button
													class="btn btn-sm btn-outline"
													onclick={() => viewRemoval(removal.removal_id)}
												>
													View
												</button>
												<button
													class="btn btn-sm btn-primary"
													onclick={() => goto(`/sites/${siteId}/removals/${removal.removal_id}/edit`)}
												>
													Edit
												</button>
											</div>
										</td>
									</tr>
								{/each}
							</tbody>
						</table>
					</div>
				{:else}
					<div class="text-center py-16">
						<svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-16 w-16 text-gray-400 mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
						</svg>
						<h3 class="text-lg font-medium text-gray-900 mb-2">No removal records found</h3>
						<p class="text-gray-600 mb-6">
							{dateFromFilter || dateToFilter || disposalMethodFilter || submaterialFilter
								? 'No removal records match your current filters.'
								: 'No removal records have been created for this site yet.'}
						</p>
						<button class="btn btn-primary" onclick={createRemoval}>
							Create First Removal Record
						</button>
					</div>
				{/if}
			</div>
		</div>

		<!-- Pagination -->
		{#if totalPages > 1}
			<div class="flex justify-center mt-6">
				<div class="join">
					<button
						class="join-item btn"
						class:btn-disabled={currentPage === 1}
						onclick={() => handlePageChange(currentPage - 1)}
					>
						Previous
					</button>
					
					{#each Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
						const startPage = Math.max(1, currentPage - 2);
						return startPage + i;
					}) as pageNum}
						{#if pageNum <= totalPages}
							<button
								class="join-item btn"
								class:btn-active={pageNum === currentPage}
								onclick={() => handlePageChange(pageNum)}
							>
								{pageNum}
							</button>
						{/if}
					{/each}
					
					<button
						class="join-item btn"
						class:btn-disabled={currentPage === totalPages}
						onclick={() => handlePageChange(currentPage + 1)}
					>
						Next
					</button>
				</div>
			</div>
		{/if}
	{/if}
</div>

================
File: src/routes/sites/[id]/reports/embodied-carbon/+page.svelte
================
<script lang="ts">
	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import sitesService from '$lib/services/sites';

	let siteId: string;
	let siteName = 'Loading...';
	let iframeRef: HTMLIFrameElement;

	onMount(async () => {
		siteId = $page.params.id;
		try {
			const site = await sitesService.getSiteById(siteId);
			siteName = site?.site_name || `Site ${siteId.slice(0, 8)}...`;
		} catch (error) {
			console.error('Error fetching site:', error);
			siteName = `Site ${siteId.slice(0, 8)}...`;
		}
	});

	function handleIframeLoad() {
		if (iframeRef && iframeRef.contentWindow) {
			try {
				const iframeDoc = iframeRef.contentDocument || iframeRef.contentWindow.document;
				if (iframeDoc) {
					// Enhanced CSS to isolate #evidence-main-article
					const style = iframeDoc.createElement('style');
					style.textContent = `
						/* Hide everything first */
						body * { display: none !important; }
						
						/* Show only the target element and its children */
						#evidence-main-article,
						#evidence-main-article * { 
							display: block !important; 
						}
						
						/* Reset body and target element styles */
						body { 
							margin: 0 !important; 
							padding: 0 !important; 
							background: white !important;
						}
						
						#evidence-main-article { 
							margin: 0 !important; 
							padding: 20px !important; 
							width: 100% !important;
							max-width: none !important;
							box-sizing: border-box !important;
						}
						
						/* Ensure proper display for common elements */
						#evidence-main-article p,
						#evidence-main-article div,
						#evidence-main-article span,
						#evidence-main-article h1,
						#evidence-main-article h2,
						#evidence-main-article h3,
						#evidence-main-article h4,
						#evidence-main-article h5,
						#evidence-main-article h6,
						#evidence-main-article table,
						#evidence-main-article tr,
						#evidence-main-article td,
						#evidence-main-article th,
						#evidence-main-article ul,
						#evidence-main-article ol,
						#evidence-main-article li {
							display: block !important;
						}
						
						#evidence-main-article table { display: table !important; }
						#evidence-main-article tr { display: table-row !important; }
						#evidence-main-article td, #evidence-main-article th { display: table-cell !important; }
						#evidence-main-article span { display: inline !important; }
					`;
					iframeDoc.head.appendChild(style);
				}
			} catch (error) {
				console.log('Cannot modify iframe content due to cross-origin restrictions');
			}
		}
	}
</script>

<svelte:head>
	<title>Embodied Carbon Report - {siteName} - WasteX™</title>
</svelte:head>

<div class="container mx-auto px-4 py-8">
	<div class="mb-8">
		<nav class="text-sm breadcrumbs">
			<ul>
				<li><a href="/" class="text-blue-600 hover:text-blue-800">Sites</a></li>
				<li><a href="/sites/{siteId}" class="text-blue-600 hover:text-blue-800">{siteName}</a></li>
				<li><a href="/sites/{siteId}/reports" class="text-blue-600 hover:text-blue-800">Reports</a></li>
				<li class="text-gray-500">Embodied Carbon</li>
			</ul>
		</nav>
		
		<div class="flex justify-between items-center">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">Embodied Carbon Report</h1>
				<p class="text-gray-600 mt-2">Material embodied carbon analysis for {siteName}</p>
			</div>
			<div class="flex gap-2">
				<a 
					href="http://localhost:3000/section5/" 
					target="_blank" 
					class="btn btn-outline btn-sm"
				>
					Open in New Tab
				</a>
			</div>
		</div>
	</div>

	<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
		<iframe
			bind:this={iframeRef}
			src="http://localhost:3000/section5/?embed=true&element=evidence-main-article"
			on:load={handleIframeLoad}
			class="w-full h-[800px] border-0"
			title="Embodied Carbon Report"
			sandbox="allow-scripts allow-same-origin"
		></iframe>
	</div>

	<div class="mt-4 text-sm text-gray-500 text-center">
		If the report doesn't load properly, you can 
		<a href="http://localhost:3000/section5/" target="_blank" class="text-blue-600 hover:text-blue-800 underline">
			open it in a new tab
		</a>.
	</div>
</div>

================
File: src/routes/sites/[id]/reports/logistic-emissions/+page.svelte
================
<script lang="ts">
	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import sitesService from '$lib/services/sites';

	let siteId: string;
	let siteName = 'Loading...';
	let iframeRef: HTMLIFrameElement;

	onMount(async () => {
		siteId = $page.params.id;
		try {
			const site = await sitesService.getSiteById(siteId);
			siteName = site?.site_name || `Site ${siteId.slice(0, 8)}...`;
		} catch (error) {
			console.error('Error fetching site:', error);
			siteName = `Site ${siteId.slice(0, 8)}...`;
		}
	});

	function handleIframeLoad() {
		if (iframeRef && iframeRef.contentWindow) {
			try {
				const iframeDoc = iframeRef.contentDocument || iframeRef.contentWindow.document;
				if (iframeDoc) {
					// Enhanced CSS to isolate #evidence-main-article
					const style = iframeDoc.createElement('style');
					style.textContent = `
						/* Hide everything first */
						body * { display: none !important; }
						
						/* Show only the target element and its children */
						#evidence-main-article,
						#evidence-main-article * { 
							display: block !important; 
						}
						
						/* Reset body and target element styles */
						body { 
							margin: 0 !important; 
							padding: 0 !important; 
							background: white !important;
						}
						
						#evidence-main-article { 
							margin: 0 !important; 
							padding: 20px !important; 
							width: 100% !important;
							max-width: none !important;
							box-sizing: border-box !important;
						}
						
						/* Ensure proper display for common elements */
						#evidence-main-article p,
						#evidence-main-article div,
						#evidence-main-article span,
						#evidence-main-article h1,
						#evidence-main-article h2,
						#evidence-main-article h3,
						#evidence-main-article h4,
						#evidence-main-article h5,
						#evidence-main-article h6,
						#evidence-main-article table,
						#evidence-main-article tr,
						#evidence-main-article td,
						#evidence-main-article th,
						#evidence-main-article ul,
						#evidence-main-article ol,
						#evidence-main-article li {
							display: block !important;
						}
						
						#evidence-main-article table { display: table !important; }
						#evidence-main-article tr { display: table-row !important; }
						#evidence-main-article td, #evidence-main-article th { display: table-cell !important; }
						#evidence-main-article span { display: inline !important; }
					`;
					iframeDoc.head.appendChild(style);
				}
			} catch (error) {
				console.log('Cannot modify iframe content due to cross-origin restrictions');
			}
		}
	}
</script>

<svelte:head>
	<title>Logistic Emissions Report - {siteName} - WasteX™</title>
</svelte:head>

<div class="container mx-auto px-4 py-8">
	<div class="mb-8">
		<nav class="text-sm breadcrumbs">
			<ul>
				<li><a href="/" class="text-blue-600 hover:text-blue-800">Sites</a></li>
				<li><a href="/sites/{siteId}" class="text-blue-600 hover:text-blue-800">{siteName}</a></li>
				<li><a href="/sites/{siteId}/reports" class="text-blue-600 hover:text-blue-800">Reports</a></li>
				<li class="text-gray-500">Logistic Emissions</li>
			</ul>
		</nav>
		
		<div class="flex justify-between items-center">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">Logistic Emissions Report</h1>
				<p class="text-gray-600 mt-2">Transportation and logistics carbon footprint for {siteName}</p>
			</div>
			<div class="flex gap-2">
				<a 
					href="http://localhost:3000/section4/?embed=true&element=evidence-main-article" 
					target="_blank" 
					class="btn btn-outline btn-sm"
				>
					Open in New Tab
				</a>
			</div>
		</div>
	</div>

	<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
		<iframe
			bind:this={iframeRef}
			src="http://localhost:3000/section4/?embed=true&element=evidence-main-article"
			on:load={handleIframeLoad}
			class="w-full h-[800px] border-0"
			title="Logistic Emissions Report"
			sandbox="allow-scripts allow-same-origin"
		></iframe>
	</div>

	<div class="mt-4 text-sm text-gray-500 text-center">
		If the report doesn't load properly, you can 
		<a href="http://localhost:3000/section4/?embed=true&element=evidence-main-article" target="_blank" class="text-blue-600 hover:text-blue-800 underline">
			open it in a new tab
		</a>.
	</div>
</div>

================
File: src/routes/sites/[id]/reports/materials/+page.svelte
================
<script lang="ts">
	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import sitesService from '$lib/services/sites';

	let siteId: string;
	let siteName = 'Loading...';
	let iframeRef: HTMLIFrameElement;

	onMount(async () => {
		siteId = $page.params.id;
		try {
			const site = await sitesService.getSiteById(siteId);
			siteName = site?.site_name || `Site ${siteId.slice(0, 8)}...`;
		} catch (error) {
			console.error('Error fetching site:', error);
			siteName = `Site ${siteId.slice(0, 8)}...`;
		}
	});

	function handleIframeLoad() {
		if (iframeRef && iframeRef.contentWindow) {
			try {
				const iframeDoc = iframeRef.contentDocument || iframeRef.contentWindow.document;
				if (iframeDoc) {
					// Enhanced CSS to isolate #evidence-main-article
					const style = iframeDoc.createElement('style');
					style.textContent = `
						/* Hide everything first */
						body * { display: none !important; }
						
						/* Show only the target element and its children */
						#evidence-main-article,
						#evidence-main-article * { 
							display: block !important; 
						}
						
						/* Reset body and target element styles */
						body { 
							margin: 0 !important; 
							padding: 0 !important; 
							background: white !important;
						}
						
						#evidence-main-article { 
							margin: 0 !important; 
							padding: 20px !important; 
							width: 100% !important;
							max-width: none !important;
							box-sizing: border-box !important;
						}
						
						/* Ensure proper display for common elements */
						#evidence-main-article p,
						#evidence-main-article div,
						#evidence-main-article span,
						#evidence-main-article h1,
						#evidence-main-article h2,
						#evidence-main-article h3,
						#evidence-main-article h4,
						#evidence-main-article h5,
						#evidence-main-article h6,
						#evidence-main-article table,
						#evidence-main-article tr,
						#evidence-main-article td,
						#evidence-main-article th,
						#evidence-main-article ul,
						#evidence-main-article ol,
						#evidence-main-article li {
							display: block !important;
						}
						
						#evidence-main-article table { display: table !important; }
						#evidence-main-article tr { display: table-row !important; }
						#evidence-main-article td, #evidence-main-article th { display: table-cell !important; }
						#evidence-main-article span { display: inline !important; }
					`;
					iframeDoc.head.appendChild(style);
				}
			} catch (error) {
				console.log('Cannot modify iframe content due to cross-origin restrictions');
			}
		}
	}
</script>

<svelte:head>
	<title>Materials Report - {siteName} - WasteX™</title>
</svelte:head>

<div class="container mx-auto px-4 py-8">
	<div class="mb-8">
		<nav class="text-sm breadcrumbs">
			<ul>
				<li><a href="/" class="text-blue-600 hover:text-blue-800">Sites</a></li>
				<li><a href="/sites/{siteId}" class="text-blue-600 hover:text-blue-800">{siteName}</a></li>
				<li><a href="/sites/{siteId}/reports" class="text-blue-600 hover:text-blue-800">Reports</a></li>
				<li class="text-gray-500">Materials</li>
			</ul>
		</nav>
		
		<div class="flex justify-between items-center">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">Materials Report</h1>
				<p class="text-gray-600 mt-2">Material usage and inventory analytics for {siteName}</p>
			</div>
			<div class="flex gap-2">
				<a 
					href="http://localhost:3000/section2/" 
					target="_blank" 
					class="btn btn-outline btn-sm"
				>
					Open in New Tab
				</a>
			</div>
		</div>
	</div>

	<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
		<iframe
			bind:this={iframeRef}
			src="http://localhost:3000/section2/?embed=true&element=evidence-main-article"
			on:load={handleIframeLoad}
			class="w-full h-[800px] border-0"
			title="Materials Report"
			sandbox="allow-scripts allow-same-origin"
		></iframe>
	</div>

	<div class="mt-4 text-sm text-gray-500 text-center">
		If the report doesn't load properly, you can 
		<a href="http://localhost:3000/section2/" target="_blank" class="text-blue-600 hover:text-blue-800 underline">
			open it in a new tab
		</a>.
	</div>
</div>

================
File: src/routes/sites/[id]/reports/site-details/+page.svelte
================
<script lang="ts">
	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import sitesService from '$lib/services/sites';

	let siteId: string;
	let siteName = 'Loading...';
	let iframeRef: HTMLIFrameElement;

	onMount(async () => {
		siteId = $page.params.id;
		try {
			const site = await sitesService.getSiteById(siteId);
			siteName = site?.site_name || `Site ${siteId.slice(0, 8)}...`;
		} catch (error) {
			console.error('Error fetching site:', error);
			siteName = `Site ${siteId.slice(0, 8)}...`;
		}
	});

	function handleIframeLoad() {
		if (iframeRef && iframeRef.contentWindow) {
			try {
				const iframeDoc = iframeRef.contentDocument || iframeRef.contentWindow.document;
				if (iframeDoc) {
					// Enhanced CSS to isolate #evidence-main-article
					const style = iframeDoc.createElement('style');
					style.textContent = `
						/* Hide everything first */
						body * { display: none !important; }
						
						/* Show only the target element and its children */
						#evidence-main-article,
						#evidence-main-article * { 
							display: block !important; 
						}
						
						/* Reset body and target element styles */
						body { 
							margin: 0 !important; 
							padding: 0 !important; 
							background: white !important;
						}
						
						#evidence-main-article { 
							margin: 0 !important; 
							padding: 20px !important; 
							width: 100% !important;
							max-width: none !important;
							box-sizing: border-box !important;
						}
						
						/* Ensure proper display for common elements */
						#evidence-main-article p,
						#evidence-main-article div,
						#evidence-main-article span,
						#evidence-main-article h1,
						#evidence-main-article h2,
						#evidence-main-article h3,
						#evidence-main-article h4,
						#evidence-main-article h5,
						#evidence-main-article h6,
						#evidence-main-article table,
						#evidence-main-article tr,
						#evidence-main-article td,
						#evidence-main-article th,
						#evidence-main-article ul,
						#evidence-main-article ol,
						#evidence-main-article li {
							display: block !important;
						}
						
						#evidence-main-article table { display: table !important; }
						#evidence-main-article tr { display: table-row !important; }
						#evidence-main-article td, #evidence-main-article th { display: table-cell !important; }
						#evidence-main-article span { display: inline !important; }
					`;
					iframeDoc.head.appendChild(style);
				}
			} catch (error) {
				// Cross-origin restrictions may prevent this, which is fine
				console.log('Cannot modify iframe content due to cross-origin restrictions');
			}
		}
	}
</script>

<svelte:head>
	<title>Site Details Report - {siteName} - WasteX™</title>
</svelte:head>

<div class="container mx-auto px-4 py-8">
	<div class="mb-8">
		<nav class="text-sm breadcrumbs">
			<ul>
				<li><a href="/" class="text-blue-600 hover:text-blue-800">Sites</a></li>
				<li><a href="/sites/{siteId}" class="text-blue-600 hover:text-blue-800">{siteName}</a></li>
				<li><a href="/sites/{siteId}/reports" class="text-blue-600 hover:text-blue-800">Reports</a></li>
				<li class="text-gray-500">Site Details</li>
			</ul>
		</nav>
		
		<div class="flex justify-between items-center">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">Site Details Report</h1>
				<p class="text-gray-600 mt-2">Comprehensive site information and analytics for {siteName}</p>
			</div>
			<div class="flex gap-2">
				<a 
					href="http://localhost:3000/section1/" 
					target="_blank" 
					class="btn btn-outline btn-sm"
				>
					Open in New Tab
				</a>
			</div>
		</div>
	</div>

	<!-- Embedded Report Content -->
	<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
		<iframe
			bind:this={iframeRef}
			src="http://localhost:3000/section1/?embed=true&element=evidence-main-article"
			on:load={handleIframeLoad}
			class="w-full h-[800px] border-0"
			title="Site Details Report"
			sandbox="allow-scripts allow-same-origin"
		></iframe>
	</div>

	<!-- Fallback message -->
	<div class="mt-4 text-sm text-gray-500 text-center">
		If the report doesn't load properly, you can 
		<a href="http://localhost:3000/section1/" target="_blank" class="text-blue-600 hover:text-blue-800 underline">
			open it in a new tab
		</a>.
	</div>
</div>

================
File: src/routes/sites/[id]/reports/waste/+page.svelte
================
<script lang="ts">
	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import sitesService from '$lib/services/sites';

	let siteId: string;
	let siteName = 'Loading...';
	let iframeRef: HTMLIFrameElement;

	onMount(async () => {
		siteId = $page.params.id;
		try {
			const site = await sitesService.getSiteById(siteId);
			siteName = site?.site_name || `Site ${siteId.slice(0, 8)}...`;
		} catch (error) {
			console.error('Error fetching site:', error);
			siteName = `Site ${siteId.slice(0, 8)}...`;
		}
	});

	function handleIframeLoad() {
		if (iframeRef && iframeRef.contentWindow) {
			try {
				const iframeDoc = iframeRef.contentDocument || iframeRef.contentWindow.document;
				if (iframeDoc) {
					// Enhanced CSS to isolate #evidence-main-article
					const style = iframeDoc.createElement('style');
					style.textContent = `
						/* Hide everything first */
						body * { display: none !important; }
						
						/* Show only the target element and its children */
						#evidence-main-article,
						#evidence-main-article * { 
							display: block !important; 
						}
						
						/* Reset body and target element styles */
						body { 
							margin: 0 !important; 
							padding: 0 !important; 
							background: white !important;
						}
						
						#evidence-main-article { 
							margin: 0 !important; 
							padding: 20px !important; 
							width: 100% !important;
							max-width: none !important;
							box-sizing: border-box !important;
						}
						
						/* Ensure proper display for common elements */
						#evidence-main-article p,
						#evidence-main-article div,
						#evidence-main-article span,
						#evidence-main-article h1,
						#evidence-main-article h2,
						#evidence-main-article h3,
						#evidence-main-article h4,
						#evidence-main-article h5,
						#evidence-main-article h6,
						#evidence-main-article table,
						#evidence-main-article tr,
						#evidence-main-article td,
						#evidence-main-article th,
						#evidence-main-article ul,
						#evidence-main-article ol,
						#evidence-main-article li {
							display: block !important;
						}
						
						#evidence-main-article table { display: table !important; }
						#evidence-main-article tr { display: table-row !important; }
						#evidence-main-article td, #evidence-main-article th { display: table-cell !important; }
						#evidence-main-article span { display: inline !important; }
					`;
					iframeDoc.head.appendChild(style);
				}
			} catch (error) {
				console.log('Cannot modify iframe content due to cross-origin restrictions');
			}
		}
	}
</script>

<svelte:head>
	<title>Waste Report - {siteName} - WasteX™</title>
</svelte:head>

<div class="container mx-auto px-4 py-8">
	<div class="mb-8">
		<nav class="text-sm breadcrumbs">
			<ul>
				<li><a href="/" class="text-blue-600 hover:text-blue-800">Sites</a></li>
				<li><a href="/sites/{siteId}" class="text-blue-600 hover:text-blue-800">{siteName}</a></li>
				<li><a href="/sites/{siteId}/reports" class="text-blue-600 hover:text-blue-800">Reports</a></li>
				<li class="text-gray-500">Waste</li>
			</ul>
		</nav>
		
		<div class="flex justify-between items-center">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">Waste Report</h1>
				<p class="text-gray-600 mt-2">Waste generation and disposal analytics for {siteName}</p>
			</div>
			<div class="flex gap-2">
				<a 
					href="http://localhost:3000/section3/" 
					target="_blank" 
					class="btn btn-outline btn-sm"
				>
					Open in New Tab
				</a>
			</div>
		</div>
	</div>

	<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
		<iframe
			bind:this={iframeRef}
			src="http://localhost:3000/section3/?embed=true&element=evidence-main-article"
			on:load={handleIframeLoad}
			class="w-full h-[800px] border-0"
			title="Waste Report"
			sandbox="allow-scripts allow-same-origin"
		></iframe>
	</div>

	<div class="mt-4 text-sm text-gray-500 text-center">
		If the report doesn't load properly, you can 
		<a href="http://localhost:3000/section3/" target="_blank" class="text-blue-600 hover:text-blue-800 underline">
			open it in a new tab
		</a>.
	</div>
</div>

================
File: src/routes/sites/[id]/reports/+page.svelte
================
<script lang="ts">
	import { page } from '$app/stores';
	import { onMount } from 'svelte';
	import sitesService from '$lib/services/sites';

	let siteId: string;
	let siteName = 'Loading...';

	onMount(async () => {
		siteId = $page.params.id;
		try {
			const site = await sitesService.getSiteById(siteId);
			siteName = site?.site_name || `Site ${siteId.slice(0, 8)}...`;
		} catch (error) {
			console.error('Error fetching site:', error);
			siteName = `Site ${siteId.slice(0, 8)}...`;
		}
	});

	const reports = [
		{
			title: 'Site Details',
			description: 'Comprehensive site information and analytics',
			url: `/sites/${$page.params.id}/reports/site-details`,
			externalUrl: 'http://localhost:3000/section1/',
			icon: '🏗️'
		},
		{
			title: 'Materials',
			description: 'Material usage and inventory reports',
			url: `/sites/${$page.params.id}/reports/materials`,
			externalUrl: 'http://localhost:3000/section2/',
			icon: '📦'
		},
		{
			title: 'Waste',
			description: 'Waste generation and disposal analytics',
			url: `/sites/${$page.params.id}/reports/waste`,
			externalUrl: 'http://localhost:3000/section3/',
			icon: '🗑️'
		},
		{
			title: 'Logistic Emissions',
			description: 'Transportation and logistics carbon footprint',
			url: `/sites/${$page.params.id}/reports/logistic-emissions`,
			externalUrl: 'http://localhost:3000/section4/',
			icon: '🚛'
		},
		{
			title: 'Embodied Carbon',
			description: 'Material embodied carbon analysis',
			url: `/sites/${$page.params.id}/reports/embodied-carbon`,
			externalUrl: 'http://localhost:3000/section5/',
			icon: '🌱'
		}
	];
</script>

<svelte:head>
	<title>Reports - {siteName} - WasteX™</title>
</svelte:head>

<div class="container mx-auto px-4 py-8">
	<div class="mb-8">
		<nav class="text-sm breadcrumbs">
			<ul>
				<li><a href="/" class="text-blue-600 hover:text-blue-800">Sites</a></li>
				<li><a href="/sites/{siteId}" class="text-blue-600 hover:text-blue-800">{siteName}</a></li>
				<li class="text-gray-500">Reports</li>
			</ul>
		</nav>
		
		<div class="flex justify-between items-center">
			<div>
				<h1 class="text-3xl font-bold text-gray-900">Reports & Analytics</h1>
				<p class="text-gray-600 mt-2">Comprehensive reporting and data analysis for {siteName}</p>
			</div>
		</div>
	</div>

	<!-- Reports Grid -->
	<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
		{#each reports as report}
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
				<div class="flex items-start justify-between mb-4">
					<div class="text-3xl">{report.icon}</div>
					<div class="flex gap-2">
						<a 
							href={report.url}
							class="btn btn-primary btn-sm"
						>
							View Report
						</a>
						<a 
							href={report.externalUrl}
							target="_blank"
							class="btn btn-outline btn-sm"
							title="Open in new tab"
						>
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
							</svg>
						</a>
					</div>
				</div>
				<h3 class="text-lg font-semibold text-gray-900 mb-2">{report.title}</h3>
				<p class="text-gray-600 text-sm">{report.description}</p>
			</div>
		{/each}
	</div>

	<!-- Additional Info -->
	<div class="mt-8 bg-blue-50 rounded-lg p-6">
		<div class="flex items-start">
			<div class="flex-shrink-0">
				<svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
				</svg>
			</div>
			<div class="ml-3">
				<h3 class="text-sm font-medium text-blue-800">About These Reports</h3>
				<div class="mt-2 text-sm text-blue-700">
					<p>These reports are generated from the external reporting system and embedded within the WasteX™ interface for seamless access. Each report can be viewed embedded or opened in a new tab for full functionality.</p>
				</div>
			</div>
		</div>
	</div>
</div>

================
File: src/routes/sites/[id]/+page.svelte
================
<script lang="ts">
	import { onMount } from 'svelte';
	import { page } from '$app/stores';
	import sitesService, { type Site, type RecentActivities } from '$lib/services/sites';
	
	let site = $state<Site | null>(null);
	let recentActivities = $state<RecentActivities | null>(null);
	let loading = $state(true);
	let error = $state<string | null>(null);
	
	let siteId = $derived($page.params.id);

	async function loadSiteData() {
		if (!siteId) return;
		
		loading = true;
		error = null;
		
		try {
			const [siteData, activitiesData] = await Promise.all([
				sitesService.getSiteById(siteId),
				sitesService.getRecentActivities(siteId)
			]);
			
			site = siteData;
			recentActivities = activitiesData;
		} catch (err) {
			console.error('Error loading site data:', err);
			error = 'Failed to load site data. Please try again later.';
		} finally {
			loading = false;
		}
	}

	onMount(() => {
		loadSiteData();
	});

	// Reload when site ID changes
	$effect(() => {
		if (siteId) {
			loadSiteData();
		}
	});
</script>

<div class="container mx-auto px-4 py-4">
	{#if loading}
		<div class="flex justify-center items-center h-64">
			<span class="loading loading-spinner loading-lg"></span>
		</div>
	{:else if error}
		<div class="alert alert-error mb-6">
			<svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
			</svg>
			<span>{error}</span>
		</div>
	{:else if site}
		<!-- Site Header -->
		<div class="mb-8">
			<h1 class="text-3xl font-bold text-gray-900 mb-2">{site.site_name}</h1>
			<p class="text-gray-600">Site Overview and Recent Activities</p>
		</div>

		<!-- Site Information -->
		<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
			<div class="card bg-base-100 shadow-lg">
				<div class="card-body">
					<h2 class="card-title text-xl mb-4">Site Information</h2>
					
					{#if site.site_address || site.site_city}
						<div class="mb-3">
							<span class="font-medium text-gray-700">Address:</span>
							<div class="text-gray-600">
								{#if site.site_address}
									<div>{site.site_address}</div>
								{/if}
								{#if site.site_city || site.site_state}
									<div>
										{site.site_city || ''}{site.site_city && site.site_state ? ', ' : ''}{site.site_state || ''}
										{site.site_postal_code ? ` ${site.site_postal_code}` : ''}
									</div>
								{/if}
							</div>
						</div>
					{/if}

					{#if site.project_cost}
						<div class="mb-3">
							<span class="font-medium text-gray-700">Project Cost:</span>
							<span class="text-gray-600">${site.project_cost.toLocaleString()}</span>
						</div>
					{/if}

					{#if site.floor_area_m_2}
						<div class="mb-3">
							<span class="font-medium text-gray-700">Floor Area:</span>
							<span class="text-gray-600">{site.floor_area_m_2.toLocaleString()} m²</span>
						</div>
					{/if}
				</div>
			</div>

			<!-- Quick Actions -->
			<div class="card bg-base-100 shadow-lg">
				<div class="card-body">
					<h2 class="card-title text-xl mb-4">Manage Data for {site?.site_name && site.site_name.length > 20 ? site.site_name.substring(0, 20) + '...' : site?.site_name || 'Site'}</h2>
					<div class="space-y-2">
						<a href="/sites/{siteId}/deliveries" class="btn btn-outline btn-block justify-start">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
							</svg>
							Materials
						</a>
						<a href="/sites/{siteId}/removals" class="btn btn-outline btn-block justify-start">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
							</svg>
							Removals
						</a>
						<a href="/sites/{siteId}/logistics/delivery-removal" class="btn btn-outline btn-block justify-start">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
							</svg>
							Delivery & Removal
						</a>
						<a href="/sites/{siteId}/logistics/onsite-machinery" class="btn btn-outline btn-block justify-start">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
							</svg>
							Onsite Machinery
						</a>
						<a href="/sites/{siteId}/logistics/water-energy" class="btn btn-outline btn-block justify-start">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
							</svg>
							Water & Energy
						</a>
					</div>
				</div>
			</div>
		</div>

		<!-- Recent Activities -->
		{#if recentActivities}
			<div class="mb-6">
				<h2 class="text-2xl font-bold text-gray-800 mb-6">Latest Activity</h2>
			</div>
			
			<div class="space-y-6">
				<!-- Materials -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<div class="flex justify-between items-center mb-4">
							<h2 class="card-title text-xl">Materials</h2>
							<a href="/sites/{siteId}/deliveries" class="btn btn-sm btn-primary">View All</a>
						</div>
						
						{#if recentActivities.deliveries.length > 0}
							<div class="overflow-x-auto">
								<table class="table table-zebra">
									<thead>
										<tr>
											<th>Document Name</th>
											<th>Delivery Date</th>
											<th>Description</th>
										</tr>
									</thead>
									<tbody>
										{#each recentActivities.deliveries as delivery}
											<tr>
												<td class="font-medium">{delivery.arrival_doc_name}</td>
												<td>{new Date(delivery.delivery_date).toLocaleDateString()}</td>
												<td class="text-sm text-gray-600">{delivery.arrival_doc_description || 'No description'}</td>
											</tr>
										{/each}
									</tbody>
								</table>
							</div>
						{:else}
							<div class="text-center py-8 text-gray-500">
								<p>No recent materials</p>
							</div>
						{/if}
					</div>
				</div>

				<!-- Removals -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<div class="flex justify-between items-center mb-4">
							<h2 class="card-title text-xl">Removals</h2>
							<a href="/sites/{siteId}/removals" class="btn btn-sm btn-primary">View All</a>
						</div>
						
						{#if recentActivities.removals.length > 0}
							<div class="overflow-x-auto">
								<table class="table table-zebra">
									<thead>
										<tr>
											<th>Removal Date</th>
											<th>Waste Weight (kg)</th>
											<th>Disposal Method</th>
										</tr>
									</thead>
									<tbody>
										{#each recentActivities.removals as removal}
											<tr>
												<td>{new Date(removal.removal_date).toLocaleDateString()}</td>
												<td>{removal.waste_weight_kg?.toLocaleString() || 'N/A'}</td>
												<td>{removal.disposal_method_name || 'Not specified'}</td>
											</tr>
										{/each}
									</tbody>
								</table>
							</div>
						{:else}
							<div class="text-center py-8 text-gray-500">
								<p>No recent removals</p>
							</div>
						{/if}
					</div>
				</div>

				<!-- Delivery & Removal -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<div class="flex justify-between items-center mb-4">
							<h2 class="card-title text-xl">Delivery & Removal</h2>
							<a href="/sites/{siteId}/logistics/delivery-removal" class="btn btn-sm btn-primary">View All</a>
						</div>
						
						{#if recentActivities.logistics.length > 0}
							<div class="overflow-x-auto">
								<table class="table table-zebra">
									<thead>
										<tr>
											<th>Delivery Date</th>
											<th>Transport Mode</th>
											<th>Distance (km)</th>
										</tr>
									</thead>
									<tbody>
										{#each recentActivities.logistics as logistic}
											<tr>
												<td>{new Date(logistic.delivery_date).toLocaleDateString()}</td>
												<td>{logistic.transport_mode || 'Not specified'}</td>
												<td>{logistic.distance_km?.toLocaleString() || 'N/A'}</td>
											</tr>
										{/each}
									</tbody>
								</table>
							</div>
						{:else}
							<div class="text-center py-8 text-gray-500">
								<p>No recent delivery & removal activities</p>
							</div>
						{/if}
					</div>
				</div>

				<!-- Onsite Machinery -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<div class="flex justify-between items-center mb-4">
							<h2 class="card-title text-xl">Onsite Machinery</h2>
							<a href="/sites/{siteId}/logistics/onsite-machinery" class="btn btn-sm btn-primary">View All</a>
						</div>
						
						{#if recentActivities.machineUsage.length > 0}
							<div class="overflow-x-auto">
								<table class="table table-zebra">
									<thead>
										<tr>
											<th>Usage Date</th>
											<th>Machine Type</th>
											<th>Usage Hours</th>
										</tr>
									</thead>
									<tbody>
										{#each recentActivities.machineUsage as usage}
											<tr>
												<td>{new Date(usage.usage_date).toLocaleDateString()}</td>
												<td>{usage.machine_type || 'Not specified'}</td>
												<td>{usage.usage_hours?.toLocaleString() || 'N/A'}</td>
											</tr>
										{/each}
									</tbody>
								</table>
							</div>
						{:else}
							<div class="text-center py-8 text-gray-500">
								<p>No recent machine operations</p>
							</div>
						{/if}
					</div>
				</div>

				<!-- Water & Energy -->
				<div class="card bg-base-100 shadow-lg">
					<div class="card-body">
						<div class="flex justify-between items-center mb-4">
							<h2 class="card-title text-xl">Water & Energy</h2>
							<a href="/sites/{siteId}/logistics/water-energy" class="btn btn-sm btn-primary">View All</a>
						</div>
						
						{#if recentActivities.waterEnergy.length > 0}
							<div class="overflow-x-auto">
								<table class="table table-zebra">
									<thead>
										<tr>
											<th>Consumption Date</th>
											<th>Resource Type</th>
											<th>Consumption</th>
										</tr>
									</thead>
									<tbody>
										{#each recentActivities.waterEnergy as resource}
											<tr>
												<td>{new Date(resource.consumption_date).toLocaleDateString()}</td>
												<td>{resource.resource_type || 'Not specified'}</td>
												<td>{resource.consumption_amount?.toLocaleString() || 'N/A'} {resource.unit || ''}</td>
											</tr>
										{/each}
									</tbody>
								</table>
							</div>
						{:else}
							<div class="text-center py-8 text-gray-500">
								<p>No recent water & energy usage</p>
							</div>
						{/if}
					</div>
				</div>
			</div>
		{/if}
	{:else}
		<div class="text-center py-12">
			<p class="text-gray-500 text-lg">Site not found</p>
		</div>
	{/if}
</div>

================
File: src/routes/+layout.server.ts
================
import type { LayoutServerLoad } from './$types';

export const load: LayoutServerLoad = async ({ locals }) => {
  return {
    username: locals.user?.username ?? null
  };
};

================
File: src/routes/+layout.svelte
================
<script lang="ts">
	import '../app.css';
	import { onMount } from 'svelte';
	import { sitesService, type Site } from '$lib';
	import type { LayoutData } from './$types';
	import { page } from '$app/stores';
  
	export let data: LayoutData;
	export let children;
  
	let sites: Site[] = [];
	let loading = true;
	let username = data.username;

	$: isLoginPage = $page.url.pathname === '/login';
  
	onMount(async () => {
	  if (!isLoginPage) {
		try {
		  sites = await sitesService.getSites();
		} catch (e) {
		  console.error('Failed to load sites:', e);
		} finally {
		  loading = false;
		}
	  }
	});

	let expandedSites = new Set<string>();

  function toggleSiteExpansion(siteId: string) {
    if (expandedSites.has(siteId)) {
      expandedSites.delete(siteId);
    } else {
      expandedSites.add(siteId);
    }
    expandedSites = new Set(expandedSites);
  }

  function closeDrawer() {
    const drawerToggle = document.getElementById('drawer') as HTMLInputElement;
    if (drawerToggle) drawerToggle.checked = false;
  }
</script>

<div class={isLoginPage ? 'min-h-screen' : 'drawer'}>
  {#if !isLoginPage}
    <input id="drawer" type="checkbox" class="drawer-toggle" />
  {/if}
  
  <div class={isLoginPage ? 'min-h-screen' : 'drawer-content flex flex-col min-h-screen'}>
    {#if !isLoginPage}
      <div class="p-2">
        <label for="drawer" class="btn btn-sm btn-square btn-ghost drawer-button">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </label>
      </div>
    {/if}
    {@render children()}
  </div>

  {#if !isLoginPage}
    <div class="drawer-side">
      <label for="drawer" class="drawer-overlay"></label>
    <aside class="w-80 min-h-full bg-base-200 flex flex-col">
      <div class="flex-1 overflow-y-auto">
        <div class="p-2">
          <h2 class="text-lg font-semibold mb-4">Sites</h2>
        {#if loading}
          <div class="container mx-auto px-4 py-2">
            <span class="loading loading-spinner loading-sm"></span>
          </div>
        {:else if sites.length === 0}
          <div class="text-sm text-base-content/60">No sites found.</div>
        {:else}
          <ul class="menu p-0 w-full flex-1">
            {#each sites as site}
              <li>
                <div class="flex items-center justify-between">
                  <button
                    class="flex-1 text-left font-medium hover:bg-base-300 rounded-lg p-2"
                    onclick={() => toggleSiteExpansion(site.site_id)}
                  >
                    {site.site_name}
                  </button>
                  <button
                    class="btn btn-ghost btn-xs"
                    onclick={() => toggleSiteExpansion(site.site_id)}
                  >
                    {#if expandedSites.has(site.site_id)}
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>
                    {:else}
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>
                    {/if}
                  </button>
                </div>
                {#if expandedSites.has(site.site_id)}
                  <ul class="ml-4 mt-2">
                    <li><a href={`/sites/${site.site_id}`} onclick={closeDrawer}>Overview</a></li>
                    <li><a href={`/sites/${site.site_id}/deliveries`} onclick={closeDrawer}>Deliveries</a></li>
                    <li><a href={`/sites/${site.site_id}/removals`} onclick={closeDrawer}>Removals</a></li>
                    <li><a href={`/sites/${site.site_id}/logistics`} onclick={closeDrawer}>Logistics</a></li>
                    <li><a href={`/sites/${site.site_id}/machine-operation`} onclick={closeDrawer}>Machine Operation</a></li>
                    <li>
                      <details>
                        <summary>Reports</summary>
                        <ul class="ml-2">
                          <li><a href={`http://localhost:3000/section1/`} target="_blank" onclick={closeDrawer}>Site Details</a></li>
                          <li><a href={`http://localhost:3000/section2/`} target="_blank" onclick={closeDrawer}>Materials</a></li>
                          <li><a href={`http://localhost:3000/section3/`} target="_blank" onclick={closeDrawer}>Waste</a></li>
                          <li><a href={`http://localhost:3000/section4/`} target="_blank" onclick={closeDrawer}>Logistic Emissions</a></li>
                          <li><a href={`http://localhost:3000/section5/`} target="_blank" onclick={closeDrawer}>Embodied Carbon</a></li>
                        </ul>
                      </details>
                    </li>
                  </ul>
                {/if}
              </li>
            {/each}
          </ul>
        {/if}
        </div>
      </div>
      {#if username}
        <div class="p-4 border-t border-base-300">
          <div class="text-sm text-base-content/80 mb-2 flex items-center gap-2">
            <span class="font-semibold">{username}</span>
            <span class="badge badge-success badge-sm">Logged in</span>
          </div>
          <a href="/logout" class="btn btn-outline btn-error btn-sm w-full">Logout</a>
        </div>
      {/if}
    </aside>
    </div>
  {/if}
</div>

================
File: src/routes/+page.svelte
================
<script lang="ts">
    import { onMount } from 'svelte';
    import { goto } from '$app/navigation';
    import { sitesService, type Site, type Company, type Stage, type GetSitesParams } from '$lib';
    
    let sites = $state<Site[]>([]);
    let companies = $state<Company[]>([]);
    let stages = $state<Stage[]>([]);
    let cities = $state<string[]>([]);
    let states = $state<string[]>([]);
    let allSites = $state<Site[]>([]);
    let loading = $state(true);
    let loadingFilters = $state(false);
    let error = $state<string | null>(null);

    // Filter state
    let selectedCompany = $state('');
    let selectedSiteName = $state('');
    let selectedStage = $state('');
    let selectedCity = $state('');
    let selectedState = $state('');
    let startDate = $state('');
    let endDate = $state('');

    // Reset state when city is selected, and vice versa
    $effect(() => {
        if (selectedCity) {
            selectedState = '';
        }
    });

    $effect(() => {
        if (selectedState) {
            selectedCity = '';
        }
    });

    async function loadFilterOptions() {
        try {
            loadingFilters = true;
            const [companiesData, stagesData, citiesData, statesData, sitesData] = await Promise.all([
                sitesService.getCompanies(),
                sitesService.getStages(),
                sitesService.getCities(),
                sitesService.getStates(),
                sitesService.getSites() // Load all sites for site name filter options
            ]);
            companies = companiesData;
            stages = stagesData;
            cities = citiesData;
            states = statesData;
            allSites = sitesData;
        } catch (err) {
            console.error('Error loading filter options:', err);
        } finally {
            loadingFilters = false;
        }
    }

    async function loadSites(filters?: GetSitesParams) {
        loading = true;
        error = null;
        try {
            sites = await sitesService.getSites(filters);
        } catch (err) {
            console.error('Error loading sites:', err);
            error = 'Failed to load sites. Please try again later.';
        } finally {
            loading = false;
        }
    }

    function clearFilters() {
        selectedCompany = '';
        selectedSiteName = '';
        selectedStage = '';
        selectedCity = '';
        selectedState = '';
        startDate = '';
        endDate = '';
    }

    function navigateToSite(siteId: string) {
        goto(`/sites/${siteId}`);
    }

    // Get unique site names for dropdown
    const uniqueSiteNames = $derived(
        allSites
            .map((site: Site) => site.site_name)
            .filter((name: string, index: number, arr: string[]) => arr.indexOf(name) === index)
            .sort()
    );

    // Reactive effect for immediate filter application
    $effect(() => {
        const filters: GetSitesParams = {};
        
        if (selectedCompany) filters.company = selectedCompany;
        if (selectedSiteName) filters.site_name = selectedSiteName;
        if (selectedStage) filters.stage = selectedStage;
        if (selectedCity) filters.city = selectedCity;
        if (selectedState) filters.state = selectedState;
        if (startDate) filters.start_date = startDate;
        if (endDate) filters.end_date = endDate;
        
        // Always load sites when filters change (including when they're cleared)
        loadSites(Object.keys(filters).length > 0 ? filters : undefined);
    });

    onMount(() => {
        loadFilterOptions();
    });
</script>

<div class="container mx-auto px-4 py-8">
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Sites</h1>
        <p class="text-gray-600">Filter and select sites to view details and manage activities</p>
    </div>

    <!-- Filter Panel -->
    <div class="card bg-base-100 shadow-lg mb-8">
        <div class="card-body py-4">
            <div class="flex flex-wrap items-center gap-4">
                <!-- Company Filter -->
                <div class="flex items-center gap-2">
                    <label for="company-filter" class="text-sm font-medium whitespace-nowrap">Company:</label>
                    <select 
                        id="company-filter"
                        class="select select-bordered select-sm w-40"
                        bind:value={selectedCompany}
                        disabled={loadingFilters}
                    >
                        <option value="">All Companies</option>
                        {#each companies as company}
                            <option value={company.company_name}>{company.company_name}</option>
                        {/each}
                    </select>
                </div>

                <!-- Site Name Filter -->
                <div class="flex items-center gap-2">
                    <label for="site-filter" class="text-sm font-medium whitespace-nowrap">Site:</label>
                    <select 
                        id="site-filter"
                        class="select select-bordered select-sm w-40"
                        bind:value={selectedSiteName}
                        disabled={loadingFilters}
                    >
                        <option value="">All Sites</option>
                        {#each uniqueSiteNames as siteName}
                            <option value={siteName}>{siteName}</option>
                        {/each}
                    </select>
                </div>

                <!-- Stage Filter -->
                <div class="flex items-center gap-2">
                    <label for="stage-filter" class="text-sm font-medium whitespace-nowrap">Stage:</label>
                    <select 
                        id="stage-filter"
                        class="select select-bordered select-sm w-40"
                        bind:value={selectedStage}
                        disabled={loadingFilters}
                    >
                        <option value="">All Stages</option>
                        {#each stages as stage}
                            <option value={stage.stage_name}>{stage.stage_name}</option>
                        {/each}
                    </select>
                </div>

                <!-- City Filter -->
                <div class="flex items-center gap-2">
                    <label for="city-filter" class="text-sm font-medium whitespace-nowrap">City:</label>
                    <select 
                        id="city-filter"
                        class="select select-bordered select-sm w-40"
                        bind:value={selectedCity}
                        disabled={loadingFilters}
                    >
                        <option value="">All Cities</option>
                        {#each cities as city}
                            <option value={city}>{city}</option>
                        {/each}
                    </select>
                </div>

                <!-- State Filter -->
                <div class="flex items-center gap-2">
                    <label for="state-filter" class="text-sm font-medium whitespace-nowrap">State:</label>
                    <select 
                        id="state-filter"
                        class="select select-bordered select-sm w-40"
                        bind:value={selectedState}
                        disabled={loadingFilters}
                    >
                        <option value="">All States</option>
                        {#each states as state}
                            <option value={state}>{state}</option>
                        {/each}
                    </select>
                </div>

                <!-- Start Date Filter -->
                <div class="flex items-center gap-2">
                    <label for="start-date-filter" class="text-sm font-medium whitespace-nowrap">From:</label>
                    <input 
                        id="start-date-filter"
                        type="date"
                        class="input input-bordered input-sm w-40"
                        bind:value={startDate}
                    />
                </div>

                <!-- End Date Filter -->
                <div class="flex items-center gap-2">
                    <label for="end-date-filter" class="text-sm font-medium whitespace-nowrap">To:</label>
                    <input 
                        id="end-date-filter"
                        type="date"
                        class="input input-bordered input-sm w-40"
                        bind:value={endDate}
                    />
                </div>

                <!-- Clear Filters Button -->
                <button 
                    class="btn btn-outline btn-sm ml-auto"
                    onclick={clearFilters}
                    disabled={!selectedCompany && !selectedSiteName && !selectedStage && !selectedCity && !selectedState && !startDate && !endDate}
                >
                    Clear Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Sites Grid -->
    {#if loading}
        <div class="flex justify-center items-center h-64">
            <span class="loading loading-spinner loading-lg"></span>
        </div>
    {:else if error}
        <div class="alert alert-error">
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>{error}</span>
        </div>
    {:else if sites.length === 0}
        <div class="text-center py-12">
            <p class="text-gray-500 text-lg">No sites found matching the selected filters</p>
            <button class="btn btn-outline btn-sm mt-4" onclick={clearFilters}>
                Clear Filters
            </button>
        </div>
    {:else}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {#each sites as site}
                <div class="card bg-base-100 shadow-xl hover:shadow-2xl transition-shadow cursor-pointer" 
                     onclick={() => navigateToSite(site.site_id)}
                     onkeydown={(e) => e.key === 'Enter' && navigateToSite(site.site_id)}
                     role="button"
                     tabindex="0">
                    <div class="card-body">
                        <h2 class="card-title text-lg font-semibold text-gray-900">
                            {site.site_name}
                        </h2>
                        
                        {#if site.site_address || site.site_city}
                            <div class="text-sm text-gray-600 mb-2">
                                {#if site.site_address}
                                    <div>{site.site_address}</div>
                                {/if}
                                {#if site.site_city || site.site_state}
                                    <div>
                                        {site.site_city || ''}{site.site_city && site.site_state ? ', ' : ''}{site.site_state || ''}
                                        {site.site_postal_code ? ` ${site.site_postal_code}` : ''}
                                    </div>
                                {/if}
                            </div>
                        {/if}

                        {#if site.creation_date}
                            <div class="text-sm text-gray-600">
                                <span class="font-medium">Created:</span> {new Date(site.creation_date).toLocaleDateString()}
                            </div>
                        {/if}

                        {#if site.project_cost}
                            <div class="text-sm text-gray-600">
                                <span class="font-medium">Project Cost:</span> ${site.project_cost.toLocaleString()}
                            </div>
                        {/if}

                        {#if site.floor_area_m_2}
                            <div class="text-sm text-gray-600">
                                <span class="font-medium">Floor Area:</span> {site.floor_area_m_2.toLocaleString()} m²
                            </div>
                        {/if}

                        <div class="card-actions justify-end mt-4">
                            <button class="btn btn-primary btn-sm">View Details</button>
                        </div>
                    </div>
                </div>
            {/each}
        </div>
    {/if}
</div>

<style lang="postcss">
    @reference "tailwindcss";
    :global(html) {
        background-color: theme(--color-gray-100);
    }
</style>

================
File: src/app.css
================
@import 'tailwindcss';
@plugin '@tailwindcss/typography';
@plugin "daisyui";

================
File: src/app.d.ts
================
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		interface Locals {
			user: { username: string } | null;
		}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};

================
File: src/app.html
================
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

================
File: src/hooks.server.ts
================
import type { Handle } from '@sveltejs/kit';
import { redirect } from '@sveltejs/kit';

const PUBLIC_ROUTES = ['/login'];

// Add typing for event.locals.user
export const handle: Handle = async ({ event, resolve }) => {
  const authToken = event.cookies.get('auth_token');
  if (!authToken && !PUBLIC_ROUTES.includes(event.url.pathname)) {
    throw redirect(303, '/login');
  }
  // Make username available to load functions/layout
  event.locals.user = authToken ? { username: authToken } : null;
  return resolve(event);
};

================
File: .cursorindexingignore
================
# Don't index SpecStory auto-save files, but allow explicit context inclusion via @ references
.specstory/**

================
File: .env.example
================
# PostgreSQL connection via PostgREST
VITE_POSTGREST_URL=http://localhost:3000
VITE_API_KEY=your_api_key_here

================
File: .gitignore
================
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

================
File: .npmrc
================
engine-strict=true

================
File: eslint.config.js
================
import js from '@eslint/js';
import { includeIgnoreFile } from '@eslint/compat';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import { fileURLToPath } from 'node:url';
import ts from 'typescript-eslint';
import svelteConfig from './svelte.config.js';

const gitignorePath = fileURLToPath(new URL('./.gitignore', import.meta.url));

export default ts.config(
	includeIgnoreFile(gitignorePath),
	js.configs.recommended,
	...ts.configs.recommended,
	...svelte.configs.recommended,
	{
		languageOptions: {
			globals: { ...globals.browser, ...globals.node }
		},
		rules: { // typescript-eslint strongly recommend that you do not use the no-undef lint rule on TypeScript projects.
		// see: https://typescript-eslint.io/troubleshooting/faqs/eslint/#i-get-errors-from-the-no-undef-rule-about-global-variables-not-being-defined-even-though-there-are-no-typescript-errors
		"no-undef": 'off' }
	},
	{
		files: [
			'**/*.svelte',
			'**/*.svelte.ts',
			'**/*.svelte.js'
		],
		ignores: ['eslint.config.js', 'svelte.config.js'],
		languageOptions: {
			parserOptions: {
				projectService: true,
				extraFileExtensions: ['.svelte'],
				parser: ts.parser,
				svelteConfig
			}
		}
	}
);

================
File: package.json
================
{
	"name": "tne-app-validate",
	"private": true,
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"prepare": "svelte-kit sync || echo ''",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"lint": "eslint ."
	},
	"devDependencies": {
		"@eslint/compat": "^1.2.5",
		"@eslint/js": "^9.18.0",
		"@sveltejs/adapter-auto": "^4.0.0",
		"@sveltejs/kit": "^2.16.0",
		"@sveltejs/vite-plugin-svelte": "^5.0.0",
		"@tailwindcss/forms": "^0.5.9",
		"@tailwindcss/typography": "^0.5.15",
		"@tailwindcss/vite": "^4.1.3",
		"daisyui": "^5.0.17",
		"eslint": "^9.18.0",
		"eslint-plugin-svelte": "^3.0.0",
		"globals": "^16.0.0",
		"mdsvex": "^0.12.3",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"tailwindcss": "^4.1.3",
		"typescript": "^5.0.0",
		"typescript-eslint": "^8.20.0",
		"vite": "^6.2.5"
	},
	"dependencies": {
		"axios": "^1.9.0",
		"dotenv": "^16.5.0",
		"flowbite-svelte": "^1.5.0",
		"pdfjs-dist": "^5.2.133",
		"svelte-modals": "^2.0.1"
	}
}

================
File: README.md
================
App Validate

================
File: schema.sql
================
create table l_materials
(
    material_id   uuid default gen_random_uuid() not null
        primary key,
    material_name varchar(100)                   not null
        unique
)
    using ???;

alter table l_materials
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_materials to anon;

grant delete, insert, references, select, trigger, truncate, update on l_materials to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_materials to service_role;

create table l_submaterials
(
    submaterial_id    uuid default gen_random_uuid() not null
        primary key,
    material_id       uuid                           not null
        references l_materials,
    submaterial_name  varchar(100)                   not null,
    density_kg_per_m3 numeric,
    unique (material_id, submaterial_name)
)
    using ???;

alter table l_submaterials
    owner to postgres;

create index idx_l_submaterials_material_id
    on l_submaterials using ??? (material_id);

grant delete, insert, references, select, trigger, truncate, update on l_submaterials to anon;

grant delete, insert, references, select, trigger, truncate, update on l_submaterials to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_submaterials to service_role;

create table l_item_details
(
    item_id            uuid default gen_random_uuid() not null
        constraint l_item_to_submaterial_pkey
            primary key,
    item_name          varchar                        not null,
    submaterial_id     uuid                           not null
        constraint l_item_to_submaterial_submaterial_id_fkey
            references l_submaterials,
    weight_kg          numeric(12, 2),
    volume_m3          double precision,
    default_excess_pct numeric(5, 2)
)
    using ???;

alter table l_item_details
    owner to postgres;

create index idx_l_item_to_submaterial_submaterial_id
    on l_item_details using ??? (submaterial_id);

grant delete, insert, references, select, trigger, truncate, update on l_item_details to anon;

grant delete, insert, references, select, trigger, truncate, update on l_item_details to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_item_details to service_role;

create table l_site_types
(
    site_type_id   uuid default gen_random_uuid() not null
        primary key,
    site_type_name varchar(50)                    not null
        unique
)
    using ???;

alter table l_site_types
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_site_types to anon;

grant delete, insert, references, select, trigger, truncate, update on l_site_types to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_site_types to service_role;

create table l_land_uses
(
    land_use_id   uuid default gen_random_uuid() not null
        primary key,
    land_use_name varchar(50)                    not null
        unique
)
    using ???;

alter table l_land_uses
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_land_uses to anon;

grant delete, insert, references, select, trigger, truncate, update on l_land_uses to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_land_uses to service_role;

create table l_units
(
    unit_id       uuid default gen_random_uuid() not null
        primary key,
    unit_name     varchar(20)                    not null
        unique,
    unit_category varchar(50)
)
    using ???;

alter table l_units
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_units to anon;

grant delete, insert, references, select, trigger, truncate, update on l_units to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_units to service_role;

create table l_suppliers
(
    supplier_id   uuid default gen_random_uuid() not null
        primary key,
    supplier_name varchar(100)                   not null
        unique,
    contact_info  text
)
    using ???;

alter table l_suppliers
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_suppliers to anon;

grant delete, insert, references, select, trigger, truncate, update on l_suppliers to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_suppliers to service_role;

create table l_vehicle_types
(
    vehicle_type_id   uuid default gen_random_uuid() not null
        primary key,
    vehicle_type_name varchar(50)                    not null
        unique
)
    using ???;

alter table l_vehicle_types
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_vehicle_types to anon;

grant delete, insert, references, select, trigger, truncate, update on l_vehicle_types to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_vehicle_types to service_role;

create table l_disposal_methods
(
    disposal_method_id   uuid default gen_random_uuid() not null
        primary key,
    disposal_method_name varchar(50)                    not null
        unique
)
    using ???;

alter table l_disposal_methods
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_disposal_methods to anon;

grant delete, insert, references, select, trigger, truncate, update on l_disposal_methods to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_disposal_methods to service_role;

create table l_disposal_facilities
(
    disposal_facility_id   uuid default gen_random_uuid() not null
        primary key,
    disposal_facility_name varchar(100),
    facility_address       text
)
    using ???;

alter table l_disposal_facilities
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_disposal_facilities to anon;

grant delete, insert, references, select, trigger, truncate, update on l_disposal_facilities to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_disposal_facilities to service_role;

create table l_machine_types
(
    machine_type_id   uuid default gen_random_uuid() not null
        primary key,
    machine_type_name varchar(100)                   not null
        unique
)
    using ???;

alter table l_machine_types
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_machine_types to anon;

grant delete, insert, references, select, trigger, truncate, update on l_machine_types to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_machine_types to service_role;

create table l_fuel_types
(
    fuel_type_id   uuid default gen_random_uuid() not null
        primary key,
    fuel_type_name varchar(50)                    not null
        unique
)
    using ???;

alter table l_fuel_types
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_fuel_types to anon;

grant delete, insert, references, select, trigger, truncate, update on l_fuel_types to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_fuel_types to service_role;

create table l_resource_types
(
    resource_type_id   uuid default gen_random_uuid() not null
        primary key,
    resource_type_name varchar(50)                    not null
        unique
)
    using ???;

alter table l_resource_types
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_resource_types to anon;

grant delete, insert, references, select, trigger, truncate, update on l_resource_types to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_resource_types to service_role;

create table l_contacts
(
    contact_id   uuid default gen_random_uuid() not null
        primary key,
    contact_name varchar(100)                   not null,
    email        varchar(100)
        unique,
    role         varchar(50),
    mobile       varchar(20),
    company_name varchar(100),
    address      text
)
    using ???;

alter table l_contacts
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_contacts to anon;

grant delete, insert, references, select, trigger, truncate, update on l_contacts to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_contacts to service_role;

create table i_sites
(
    site_id          uuid      default gen_random_uuid() not null
        primary key,
    site_name        varchar(100)                        not null,
    site_address     varchar(255),
    site_city        varchar(100),
    site_state       varchar(50),
    site_postal_code varchar(20),
    site_country     varchar(50),
    site_type_id     uuid
        references l_site_types,
    land_use_id      uuid
        references l_land_uses,
    creation_date    timestamp default CURRENT_TIMESTAMP,
    project_cost     numeric(12, 2),
    floor_area_m_2   numeric(12, 2)
)
    using ???;

alter table i_sites
    owner to postgres;

create index idx_i_sites_site_type_id
    on i_sites using ??? (site_type_id);

create index idx_i_sites_land_use_id
    on i_sites using ??? (land_use_id);

grant delete, insert, references, select, trigger, truncate, update on i_sites to anon;

grant delete, insert, references, select, trigger, truncate, update on i_sites to authenticated;

grant delete, insert, references, select, trigger, truncate, update on i_sites to service_role;

create table i_sites_stages
(
    stage_id   uuid default gen_random_uuid() not null
        constraint i_stages_pkey
            primary key,
    site_id    uuid,
    start_date date,
    end_date   date
)
    using ???;

alter table i_sites_stages
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on i_sites_stages to anon;

grant delete, insert, references, select, trigger, truncate, update on i_sites_stages to authenticated;

grant delete, insert, references, select, trigger, truncate, update on i_sites_stages to service_role;

create table i_materials
(
    material_entry_id     uuid    default gen_random_uuid() not null
        primary key,
    site_id               uuid                              not null
        references i_sites,
    submaterial_id        uuid
        references l_submaterials,
    quantity              numeric(12, 2)                    not null,
    unit_id               uuid
        references l_units,
    weight_kg             numeric(12, 2),
    volume_m3             numeric(12, 2),
    cost_per_unit         numeric(12, 2),
    total_cost            numeric(12, 2),
    supplier_id           uuid
        references l_suppliers,
    delivery_date         date,
    stage_id              uuid,
    notes                 text,
    item_id               uuid,
    arrival_doc_item_name varchar,
    arrival_doc_id        uuid,
    is_valid              boolean default false,
    default_waste_pct     numeric(5, 2),
    id_po                 varchar
)
    using ???;

alter table i_materials
    owner to postgres;

create index idx_i_materials_site_id
    on i_materials using ??? (site_id);

create index idx_i_materials_submaterial_id
    on i_materials using ??? (submaterial_id);

create index idx_i_materials_unit_id
    on i_materials using ??? (unit_id);

create index idx_i_materials_supplier_id
    on i_materials using ??? (supplier_id);

create index idx_i_materials_stage_id
    on i_materials using ??? (stage_id);

grant delete, insert, references, select, trigger, truncate, update on i_materials to anon;

grant delete, insert, references, select, trigger, truncate, update on i_materials to authenticated;

grant delete, insert, references, select, trigger, truncate, update on i_materials to service_role;

create table i_logistics
(
    logistics_id             uuid default gen_random_uuid() not null
        primary key,
    site_id                  uuid                           not null
        references i_sites,
    submaterial_id           uuid                           not null
        references l_submaterials,
    supplier_id              uuid
        references l_suppliers,
    total_material_weight_kg numeric(12, 2),
    delivery_distance_km     integer,
    delivery_date            date,
    delivery_vehicle_type_id uuid
        references l_vehicle_types,
    delivery_notes           text
)
    using ???;

alter table i_logistics
    owner to postgres;

create index idx_i_logistics_site_id
    on i_logistics using ??? (site_id);

create index idx_i_logistics_submaterial_id
    on i_logistics using ??? (submaterial_id);

create index idx_i_logistics_supplier_id
    on i_logistics using ??? (supplier_id);

create index idx_i_logistics_delivery_vehicle_type_id
    on i_logistics using ??? (delivery_vehicle_type_id);

grant delete, insert, references, select, trigger, truncate, update on i_logistics to anon;

grant delete, insert, references, select, trigger, truncate, update on i_logistics to authenticated;

grant delete, insert, references, select, trigger, truncate, update on i_logistics to service_role;

create table i_resource_removal
(
    removal_id           uuid default gen_random_uuid() not null
        primary key,
    site_id              uuid                           not null
        references i_sites,
    submaterial_id       uuid                           not null
        references l_submaterials,
    waste_weight_kg      numeric(12, 2),
    waste_volume_m3      numeric(12, 2),
    removal_distance_km  integer,
    removal_date         date,
    disposal_method_id   uuid
        references l_disposal_methods,
    disposal_facility_id uuid
        references l_disposal_facilities,
    removal_cost         numeric(12, 2),
    removal_notes        text,
    removal_partner_id   uuid,
    appx_resource_value  numeric(12, 2),
    id_po                varchar
)
    using ???;

alter table i_resource_removal
    owner to postgres;

create index idx_i_resource_removal_site_id
    on i_resource_removal using ??? (site_id);

create index idx_i_resource_removal_submaterial_id
    on i_resource_removal using ??? (submaterial_id);

create index idx_i_resource_removal_disposal_method_id
    on i_resource_removal using ??? (disposal_method_id);

create index idx_i_resource_removal_disposal_facility_id
    on i_resource_removal using ??? (disposal_facility_id);

grant delete, insert, references, select, trigger, truncate, update on i_resource_removal to anon;

grant delete, insert, references, select, trigger, truncate, update on i_resource_removal to authenticated;

grant delete, insert, references, select, trigger, truncate, update on i_resource_removal to service_role;

create table i_machine_usage
(
    usage_id                uuid default gen_random_uuid() not null
        primary key,
    site_id                 uuid                           not null
        references i_sites,
    machine_type_id         uuid
        references l_machine_types,
    usage_hours             numeric(10, 2)                 not null,
    fuel_type_id            uuid
        references l_fuel_types,
    fuel_consumption_liters numeric(10, 2),
    co2_emissions_kg        numeric(10, 2),
    usage_date              date,
    stage_id                uuid
        references i_sites_stages,
    notes                   text
)
    using ???;

alter table i_machine_usage
    owner to postgres;

create index idx_i_machine_usage_site_id
    on i_machine_usage using ??? (site_id);

create index idx_i_machine_usage_machine_type_id
    on i_machine_usage using ??? (machine_type_id);

create index idx_i_machine_usage_fuel_type_id
    on i_machine_usage using ??? (fuel_type_id);

create index idx_i_machine_usage_stage_id
    on i_machine_usage using ??? (stage_id);

grant delete, insert, references, select, trigger, truncate, update on i_machine_usage to anon;

grant delete, insert, references, select, trigger, truncate, update on i_machine_usage to authenticated;

grant delete, insert, references, select, trigger, truncate, update on i_machine_usage to service_role;

create table i_water_energy
(
    resource_id         uuid default gen_random_uuid() not null
        primary key,
    site_id             uuid                           not null
        references i_sites,
    resource_type_id    uuid
        references l_resource_types,
    consumption_amount  numeric(12, 2)                 not null,
    consumption_unit_id uuid
        references l_units,
    co2_equivalent_kg   numeric(10, 2),
    cost                numeric(10, 2),
    consumption_date    date,
    stage_id            uuid
        references i_sites_stages,
    notes               text
)
    using ???;

alter table i_water_energy
    owner to postgres;

create index idx_i_water_energy_site_id
    on i_water_energy using ??? (site_id);

create index idx_i_water_energy_resource_type_id
    on i_water_energy using ??? (resource_type_id);

create index idx_i_water_energy_consumption_unit_id
    on i_water_energy using ??? (consumption_unit_id);

create index idx_i_water_energy_stage_id
    on i_water_energy using ??? (stage_id);

grant delete, insert, references, select, trigger, truncate, update on i_water_energy to anon;

grant delete, insert, references, select, trigger, truncate, update on i_water_energy to authenticated;

grant delete, insert, references, select, trigger, truncate, update on i_water_energy to service_role;

create table r_site_details
(
    site_detail_id               uuid      default gen_random_uuid() not null
        primary key,
    site_id                      uuid                                not null
        references i_sites,
    project_name                 varchar(100)                        not null,
    site_type                    varchar(50),
    site_address                 varchar(255),
    land_use                     varchar(50),
    build_type                   varchar(50),
    construction_floor_area_sqm  integer,
    estimated_project_value      numeric(14, 2),
    stories                      integer,
    expected_start_date          date,
    expected_end_date            date,
    building_owner               varchar(100),
    description                  text,
    company_name                 varchar(100),
    project_leader_contact_id    uuid
        references l_contacts,
    resource_manager1_contact_id uuid
        references l_contacts,
    report_generation_date       timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_site_details
    owner to postgres;

create index idx_r_site_details_site_id
    on r_site_details using ??? (site_id);

create index idx_r_site_details_project_leader_contact_id
    on r_site_details using ??? (project_leader_contact_id);

create index idx_r_site_details_resource_manager1_contact_id
    on r_site_details using ??? (resource_manager1_contact_id);

grant delete, insert, references, select, trigger, truncate, update on r_site_details to anon;

grant delete, insert, references, select, trigger, truncate, update on r_site_details to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_site_details to service_role;

create table r_materials
(
    material_report_id          uuid      default gen_random_uuid() not null
        primary key,
    site_id                     uuid                                not null
        references i_sites,
    material_id                 uuid                                not null
        references l_materials,
    total_weight_kg             numeric(12, 2),
    total_volume_m3             numeric(12, 2),
    total_cost                  numeric(12, 2),
    avg_excess_percentage       numeric(5, 2),
    project_budget              numeric(14, 2),
    material_total_cost         numeric(12, 2),
    materials_budget_percentage numeric(5, 2),
    report_generation_date      timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_materials
    owner to postgres;

create index idx_r_materials_site_id
    on r_materials using ??? (site_id);

create index idx_r_materials_material_id
    on r_materials using ??? (material_id);

grant delete, insert, references, select, trigger, truncate, update on r_materials to anon;

grant delete, insert, references, select, trigger, truncate, update on r_materials to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_materials to service_role;

create table r_waste
(
    waste_report_id        uuid      default gen_random_uuid() not null
        primary key,
    site_id                uuid                                not null
        references i_sites,
    material_id            uuid                                not null
        references l_materials,
    submaterial_id         uuid                                not null
        references l_submaterials,
    waste_weight_kg        numeric(12, 2),
    waste_volume_m3        numeric(12, 2),
    waste_value            numeric(12, 2),
    removal_cost           numeric(12, 2),
    landfill_weight        numeric(12, 2),
    cleanfill_weight       numeric(12, 2),
    recycle_weight         numeric(12, 2),
    reuse_weight           numeric(12, 2),
    diversion_rate_pct     numeric(5, 2),
    report_generation_date timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_waste
    owner to postgres;

create index idx_r_waste_site_id
    on r_waste using ??? (site_id);

create index idx_r_waste_material_id
    on r_waste using ??? (material_id);

create index idx_r_waste_submaterial_id
    on r_waste using ??? (submaterial_id);

grant delete, insert, references, select, trigger, truncate, update on r_waste to anon;

grant delete, insert, references, select, trigger, truncate, update on r_waste to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_waste to service_role;

create table r_waste_summary
(
    waste_summary_id            uuid      default gen_random_uuid() not null
        primary key,
    site_id                     uuid                                not null
        references i_sites,
    total_waste_weight_kg       numeric(12, 2),
    total_waste_volume_m3       numeric(12, 2),
    total_waste_value           numeric(12, 2),
    total_removal_cost          numeric(12, 2),
    total_landfill_weight       numeric(12, 2),
    total_cleanfill_weight      numeric(12, 2),
    total_recycle_weight        numeric(12, 2),
    total_reuse_weight          numeric(12, 2),
    diversion_percentage        numeric(5, 2),
    waste_generation_rate_kg_m2 numeric(10, 4),
    report_generation_date      timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_waste_summary
    owner to postgres;

create index idx_r_waste_summary_site_id
    on r_waste_summary using ??? (site_id);

grant delete, insert, references, select, trigger, truncate, update on r_waste_summary to anon;

grant delete, insert, references, select, trigger, truncate, update on r_waste_summary to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_waste_summary to service_role;

create table r_logistics_emissions
(
    logistics_report_id      uuid      default gen_random_uuid() not null
        primary key,
    site_id                  uuid                                not null
        references i_sites,
    material_id              uuid                                not null
        references l_materials,
    submaterial_id           uuid                                not null
        references l_submaterials,
    supplier                 varchar(100),
    total_material_weight_kg numeric(12, 2),
    waste_weight_kg          numeric(12, 2),
    delivery_distance_km     integer,
    removal_distance_km      integer,
    delivery_emissions_co2   numeric(10, 2),
    removal_emissions_co2    numeric(10, 2),
    total_emissions_co2      numeric(10, 2),
    report_generation_date   timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_logistics_emissions
    owner to postgres;

create index idx_r_logistics_emissions_site_id
    on r_logistics_emissions using ??? (site_id);

create index idx_r_logistics_emissions_material_id
    on r_logistics_emissions using ??? (material_id);

create index idx_r_logistics_emissions_submaterial_id
    on r_logistics_emissions using ??? (submaterial_id);

grant delete, insert, references, select, trigger, truncate, update on r_logistics_emissions to anon;

grant delete, insert, references, select, trigger, truncate, update on r_logistics_emissions to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_logistics_emissions to service_role;

create table r_logistics_emissions_summary
(
    logistics_summary_id         uuid      default gen_random_uuid() not null
        primary key,
    site_id                      uuid                                not null
        references i_sites,
    total_delivery_emissions_co2 numeric(12, 2),
    total_removal_emissions_co2  numeric(12, 2),
    total_emissions_co2          numeric(12, 2),
    avg_delivery_distance        integer,
    avg_removal_distance         integer,
    avg_total_distance           integer,
    report_generation_date       timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_logistics_emissions_summary
    owner to postgres;

create index idx_r_logistics_emissions_summary_site_id
    on r_logistics_emissions_summary using ??? (site_id);

grant delete, insert, references, select, trigger, truncate, update on r_logistics_emissions_summary to anon;

grant delete, insert, references, select, trigger, truncate, update on r_logistics_emissions_summary to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_logistics_emissions_summary to service_role;

create table r_embodied_carbon
(
    carbon_report_id         uuid      default gen_random_uuid() not null
        primary key,
    site_id                  uuid                                not null
        references i_sites,
    material_id              uuid                                not null
        references l_materials,
    submaterial_id           uuid                                not null
        references l_submaterials,
    total_material_weight_kg numeric(12, 2),
    waste_weight_kg          numeric(12, 2),
    carbon_factor            numeric(10, 4),
    material_carbon          numeric(12, 2),
    waste_carbon             numeric(12, 2),
    logistics_carbon         numeric(12, 2),
    total_embodied_carbon    numeric(12, 2),
    report_generation_date   timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_embodied_carbon
    owner to postgres;

create index idx_r_embodied_carbon_site_id
    on r_embodied_carbon using ??? (site_id);

create index idx_r_embodied_carbon_material_id
    on r_embodied_carbon using ??? (material_id);

create index idx_r_embodied_carbon_submaterial_id
    on r_embodied_carbon using ??? (submaterial_id);

grant delete, insert, references, select, trigger, truncate, update on r_embodied_carbon to anon;

grant delete, insert, references, select, trigger, truncate, update on r_embodied_carbon to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_embodied_carbon to service_role;

create table r_embodied_carbon_summary
(
    carbon_summary_id      uuid      default gen_random_uuid() not null
        primary key,
    site_id                uuid                                not null
        references i_sites,
    total_material_carbon  numeric(12, 2),
    total_waste_carbon     numeric(12, 2),
    total_logistics_carbon numeric(12, 2),
    total_embodied_carbon  numeric(12, 2),
    report_generation_date timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_embodied_carbon_summary
    owner to postgres;

create index idx_r_embodied_carbon_summary_site_id
    on r_embodied_carbon_summary using ??? (site_id);

grant delete, insert, references, select, trigger, truncate, update on r_embodied_carbon_summary to anon;

grant delete, insert, references, select, trigger, truncate, update on r_embodied_carbon_summary to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_embodied_carbon_summary to service_role;

create table r_materials_budget
(
    budget_report_id          uuid      default gen_random_uuid() not null
        primary key,
    site_id                   uuid                                not null
        references i_sites,
    total_project_budget      numeric(14, 2),
    budget_spent_on_materials numeric(14, 2),
    percentage_of_budget      numeric(5, 2),
    report_generation_date    timestamp default CURRENT_TIMESTAMP
)
    using ???;

alter table r_materials_budget
    owner to postgres;

create index idx_r_materials_budget_site_id
    on r_materials_budget using ??? (site_id);

grant delete, insert, references, select, trigger, truncate, update on r_materials_budget to anon;

grant delete, insert, references, select, trigger, truncate, update on r_materials_budget to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_materials_budget to service_role;

create table i_arrival_documents
(
    arrival_doc_id          uuid    default gen_random_uuid(),
    delivery_date           date,
    arrival_doc_name        varchar,
    arrival_doc_description varchar,
    arrival_doc_text        varchar,
    site_id                 uuid,
    is_valid                boolean default false
)
    using ???;

alter table i_arrival_documents
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on i_arrival_documents to anon;

grant delete, insert, references, select, trigger, truncate, update on i_arrival_documents to authenticated;

grant delete, insert, references, select, trigger, truncate, update on i_arrival_documents to service_role;

create table l_removal_partners
(
    removal_partner_id           uuid default gen_random_uuid(),
    removal_partner_name         varchar,
    removal_partner_contact_info integer
)
    using ???;

alter table l_removal_partners
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_removal_partners to anon;

grant delete, insert, references, select, trigger, truncate, update on l_removal_partners to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_removal_partners to service_role;

create table r_diversion_pct_by_month
(
    year_num      integer,
    month_num     integer
        constraint check_valid_month
            check ((month_num >= 1) AND (month_num <= 12)),
    diversion_pct numeric(5, 2)
)
    using ???;

alter table r_diversion_pct_by_month
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on r_diversion_pct_by_month to anon;

grant delete, insert, references, select, trigger, truncate, update on r_diversion_pct_by_month to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_diversion_pct_by_month to service_role;

create table r_removal_by_month_and_method
(
    year_num           integer,
    month_num          integer
        constraint check_valid_month
            check ((month_num >= 1) AND (month_num <= 12)),
    disposal_method_id uuid,
    mass_kg            numeric(5, 2)
)
    using ???;

alter table r_removal_by_month_and_method
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on r_removal_by_month_and_method to anon;

grant delete, insert, references, select, trigger, truncate, update on r_removal_by_month_and_method to authenticated;

grant delete, insert, references, select, trigger, truncate, update on r_removal_by_month_and_method to service_role;

create table l_stages
(
    stage_id   uuid default gen_random_uuid(),
    stage_name varchar
)
    using ???;

alter table l_stages
    owner to postgres;

grant delete, insert, references, select, trigger, truncate, update on l_stages to anon;

grant delete, insert, references, select, trigger, truncate, update on l_stages to authenticated;

grant delete, insert, references, select, trigger, truncate, update on l_stages to service_role;

================
File: svelte.config.js
================
import { mdsvex } from 'mdsvex';
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

const config = {
	preprocess: [vitePreprocess(), mdsvex()],
	kit: { adapter: adapter() },
	extensions: ['.svelte', '.svx']
};

export default config;

================
File: tsconfig.json
================
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}

================
File: vite.config.ts
================
import tailwindcss from '@tailwindcss/vite';
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [tailwindcss(), sveltekit()]
});



================================================================
End of Codebase
================================================================
